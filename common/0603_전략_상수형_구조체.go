package common

import (
	"time"
)

// 전략이 생성한 신호.
type C신호 struct {
	식별코드   *C부호없는_정수64
	전략식별코드 *C부호없는_정수64
	생성시점   *C시점
	가격정보시점 *C시점      // 과거 데이터에 대한 모의 시뮬레이션에서 필요함.
	신호종류   *C부호없는_정수8 // 초도매수, 추가매수, 전량매도, 분할초도매도,분할추가매도
	종목     *C종목
	단가     *C실수64 // 신호발생 시점의 해당 종목 현재가.
	//주문 *C주문
	//후속신호 []*C신호 // 추가매수, 매도 신호. 이것은 상수형태에 부적합하다고 판단됨.
	//청산완료 *C부울
}

func (c *C신호) G식별코드() uint64      { return c.식별코드.G값() }
func (c *C신호) G전략식별코드() uint64    { return c.전략식별코드.G값() }
func (c *C신호) G생성시점() time.Time   { return c.생성시점.G값() }
func (c *C신호) G가격정보시점() time.Time { return c.가격정보시점.G값() }
func (c *C신호) G신호종류() uint8       { return c.신호종류.G값() }
func (c *C신호) G종목() *C종목          { return c.종목 }
func (c *C신호) G단가() float64       { return c.단가.G값() }

//func (c *C신호) G주문() *C주문 { return 신호.주문 }
/* func (c *C신호) G후속신호() []*C신호 {
return 신호.후속신호
//return 슬라이스복사(신호.후속신호).([]*C신호) } */
//func (c *C신호) G청산완료() bool { return 신호.청산완료.G값() }
func F신호_생성(
	식별코드 uint64,
	전략 I전략,
	생성시점 time.Time,
	신호종류 uint8,
	종목 *C종목,
	단가 float64) *C신호 { //, 주문 *C주문, 후속신호 []*C신호, 청산완료 bool) {
	c := new(C신호)
	c.식별코드 = F부호없는_정수64_생성(식별코드)
	c.전략식별코드 = F부호없는_정수64_생성(전략.G식별코드())
	c.생성시점 = F시점_생성(생성시점)
	c.신호종류 = F부호없는_정수8_생성(신호종류)
	c.종목 = 종목
	c.단가 = F실수64_생성(단가)
	//c.주문 = 주문
	//c.후속신호 = 후속신호	//c.후속신호 = F슬라이스복사(후속신호).([]*C신호)
	//c.청산완료 = F부울_생성(청산완료)

	return c
}

// 전략에서 서버로 보내는 데이터
type C주문 struct {
	식별코드     *C부호없는_정수64
	관련신호     *C신호
	주문종류     *C부호없는_정수8 // 현재가매수, 가격지정매수, 현재가매도, 가격지정매도
	수량       *C부호없는_정수64
	증권사      *C증권사 // 처리하기를 원하는 증권사 모듈지정
	처리결과통보채널 chan *C주문처리결과
}

func (c *C주문) G식별코드() uint64 { return c.식별코드.G값() }
func (c *C주문) G관련신호() *C신호   { return c.관련신호 }
func (c *C주문) G주문종류() uint8  { return c.주문종류.G값() }
func (c *C주문) G수량() uint64   { return c.수량.G값() }
func (c *C주문) G증권사() *C증권사   { return c.증권사 }
func (c *C주문) G처리결과통보채널() chan *C주문처리결과 {
	return c.처리결과통보채널
}
func (c *C주문) G가격정보시점() time.Time { return c.관련신호.G가격정보시점() }
func F주문_생성(
	식별코드 uint64,
	관련신호 *C신호,
	주문종류 uint8,
	수량 uint64,
	증권사 *C증권사,
	처리결과통보채널 chan *C주문처리결과) *C주문 {
	c := new(C주문)
	c.식별코드 = F부호없는_정수64_생성(식별코드)
	c.관련신호 = 관련신호
	c.주문종류 = F부호없는_정수8_생성(주문종류)
	c.수량 = F부호없는_정수64_생성(수량)
	c.증권사 = 증권사
	c.처리결과통보채널 = 처리결과통보채널

	return c
}

type C매매내역 struct {
	식별코드   *C부호없는_정수64
	매매시점   *C시점
	가격정보시점 *C시점
	종목     *C종목
	단가     *C실수64
	수량     *C정수64 // 매수는 (+), 매도는 (-)
}

func (c *C매매내역) G식별코드() uint64      { return c.식별코드.G값() }
func (c *C매매내역) G매매시점() time.Time   { return c.매매시점.G값() }
func (c *C매매내역) G가격정보시점() time.Time { return c.가격정보시점.G값() }
func (c *C매매내역) G종목() *C종목          { return c.종목 }
func (c *C매매내역) G단가() float64       { return c.단가.G값() }
func (c *C매매내역) G수량() int64         { return c.수량.G값() }
func F매매내역_생성(
	식별코드 uint64,
	매매시점 time.Time,
	가격정보시점 time.Time,
	종목 *C종목,
	단가 float64,
	수량 int64) *C매매내역 {
	c := new(C매매내역)
	c.식별코드 = F부호없는_정수64_생성(식별코드)
	c.매매시점 = F시점_생성(매매시점)
	c.가격정보시점 = F시점_생성(가격정보시점)
	c.종목 = 종목
	c.단가 = F실수64_생성(단가)
	c.수량 = F정수64_생성(수량)

	return c
}

// 포트폴리오 관련 상수형은 채널로 전달하는 게 목적일 뿐,
// 실제로 관리하고 사용할 때는 변경가능한 구조체를 사용해야 할 듯 하다.
type C포트폴리오구성원 struct {
	계좌 *C계좌
	종목 *C종목
	수량 *C정수64
}

func (c *C포트폴리오구성원) G계좌() *C계좌  { return c.계좌 }
func (c *C포트폴리오구성원) G종목() *C종목  { return c.종목 }
func (c *C포트폴리오구성원) G수량() int64 { return c.수량.G값() }
func F포트폴리오구성원_생성(
	계좌 *C계좌,
	종목 *C종목,
	수량 int64) *C포트폴리오구성원 {
	c := new(C포트폴리오구성원)
	c.계좌 = 계좌
	c.종목 = 종목
	c.수량 = F정수64_생성(수량)

	return c
}

type C포트폴리오내역구성원 struct {
	포트폴리오구성원 *C포트폴리오구성원
	매매내역     []*C매매내역
}

func (c *C포트폴리오내역구성원) G포트폴리오구성원() *C포트폴리오구성원 {
	return c.포트폴리오구성원
}
func (c *C포트폴리오내역구성원) G매매내역() []*C매매내역 {
	return c.매매내역
	//return F슬라이스복사(c.매입내역).([]*C매입단가)
}
func F포트폴리오내역구성원_생성(
	포트폴리오구성원 *C포트폴리오구성원,
	매매내역 []*C매매내역) *C포트폴리오내역구성원 {
	c := new(C포트폴리오내역구성원)
	c.포트폴리오구성원 = 포트폴리오구성원
	c.매매내역 = 매매내역

	return c
}
func (c *C포트폴리오내역구성원) G수량() int64 {
	return c.포트폴리오구성원.수량.G값()
}
func (c *C포트폴리오내역구성원) G평균매입단가() float64 {
	return c.G매입금액() / float64(c.G수량())
}
func (c *C포트폴리오내역구성원) G현재단가() float64 { panic("TODO") }
func (c *C포트폴리오내역구성원) G매입금액() float64 {
	// TODO
	// 먼저 매입내역([]*C매입단가)를 시간에 대한 역순으로 정렬할 것.
	// 수량만큼 시간을 거슬러 올라가면서 매입금액을 계산할 것.
	panic("TODO")

	//return 매입금액
}
func (c *C포트폴리오내역구성원) 현재평가금액() float64 {
	return c.G현재단가() * float64(c.G수량())
}

type C포트폴리오내역 struct {
	포트폴리오내역 []*C포트폴리오내역구성원
}

func (c *C포트폴리오내역) G포트폴리오내역() []*C포트폴리오내역구성원 {
	return c.포트폴리오내역
	//return F슬라이스복사(c.포트폴리오내역).([]*C포트폴리오내역구성원)
}
func F포트폴리오내역_생성(포트폴리오내역 []*C포트폴리오내역구성원) *C포트폴리오내역 {
	c := new(C포트폴리오내역)
	c.포트폴리오내역 = 포트폴리오내역
	//c.포트폴리오내역 = F슬라이스복사(포트폴리오내역).([]*C포트폴리오내역구성원)

	return c
}
func (c *C포트폴리오내역) GSharpe비율() float64 { panic("TODO") }
func (c *C포트폴리오내역) G연평균수익률() float64   { panic("TODO") }
