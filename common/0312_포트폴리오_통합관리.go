package common

func F포트폴리오_모음_생성(식별코드 uint64, 이름 string) *S포트폴리오_모음 {
	s := new(S포트폴리오_모음)
	s.식별코드 = 식별코드
	s.이름 = 이름
	
	return s
}

// 전략별 포트폴리오를 한데 모아서 통합적으로 하나처럼 관리하도록 하는 목적임.
type S포트폴리오_모음 struct {
	식별코드 uint64
	통화_식별코드 P통화
	이름 string
	포트폴리오_모음 []I포트폴리오	
}
func (s *S포트폴리오_모음) 초기화() {
	if s.포트폴리오_모음 == nil {
		s.포트폴리오_모음 = make([]I포트폴리오, 0)
	}
}
func (s *S포트폴리오_모음) S추가(포트폴리오 I포트폴리오) {
	if s.포트폴리오_모음 == nil { s.초기화() }
	
	s.포트폴리오_모음 = append(s.포트폴리오_모음, 포트폴리오)
}
func (s *S포트폴리오_모음) G식별코드() uint64 { return s.식별코드 }
func (s *S포트폴리오_모음) G통화_식별코드() P통화 { return s.통화_식별코드 }
func (s *S포트폴리오_모음) G이름() string { return s.이름 }
func (s *S포트폴리오_모음) G보유_종목_모음() []*C종목 {
	// 맵을 이용하여 중복을 제거한 후, 슬라이스 형태로 반환.
	맵 := make(map[string]*C종목)
	
	for _, 포트폴리오 := range s.포트폴리오_모음 {
		보유_종목_모음 := 포트폴리오.G보유_종목_모음()
		for _, 종목 := range 보유_종목_모음 {
			if 종목 == nil || 
				종목.G종목코드() == "" {
				continue
			}
			
			맵[종목.G종목코드()] = 종목
		}
	}
	
	슬라이스 := make([]*C종목, 0)
	
	for _, 종목 := range 맵 {
		슬라이스 = append(슬라이스, 종목)
	}
	
	return 슬라이스
}
func (s *S포트폴리오_모음) G종목별_포트폴리오(종목코드 string) I종목별_포트폴리오 {
	if s.포트폴리오_모음 == nil { s.초기화() }
	
	식별코드 := uint64(0)
	종목 := F종목_검색(종목코드)
	
	종목별_포트폴리오_통합관리 := F종목별_포트폴리오_통합관리_생성(식별코드, 종목)
	
	for _, 포트폴리오 := range s.포트폴리오_모음 {
		종목별_포트폴리오_통합관리.S추가(포트폴리오.G종목별_포트폴리오(종목코드))
	}
	
	return 종목별_포트폴리오_통합관리
}
func (s *S포트폴리오_모음) G전종목_포트폴리오() []I종목별_포트폴리오 {
	if s.포트폴리오_모음 == nil { s.초기화() }
	
	보유_종목_모음 := s.G보유_종목_모음()
	종목별_포트폴리오_슬라이스 := make([]I종목별_포트폴리오, 0)
	
	for _, 종목 := range 보유_종목_모음 {
		종목별_포트폴리오_슬라이스 = append(종목별_포트폴리오_슬라이스, s.G종목별_포트폴리오(종목.G종목코드()))
	}
	
	return 종목별_포트폴리오_슬라이스		
}
func (s *S포트폴리오_모음) G롱포지션_금액() I통화 {
	if s.포트폴리오_모음 == nil { s.초기화() }
	
	합계 := float64(0.0)
	
	for _, 포트폴리오 := range s.포트폴리오_모음 {
		합계 = 합계 + 포트폴리오.G롱포지션_금액().G값()
	}
	
	return F통화_생성(s.G통화_식별코드(), 합계)
}
func (s *S포트폴리오_모음) G숏포지션_금액() I통화 {
	if s.포트폴리오_모음 == nil { s.초기화() }
	
	합계 := float64(0.0)
	
	for _, 포트폴리오 := range s.포트폴리오_모음 {
		합계 = 합계 + 포트폴리오.G숏포지션_금액().G값()
	}
	
	return F통화_생성(s.G통화_식별코드(), 합계)
}
func (s *S포트폴리오_모음) G순_금액() I통화 {
	if s.포트폴리오_모음 == nil { s.초기화() }
	
	합계 := float64(0.0)
	
	for _, 포트폴리오 := range s.포트폴리오_모음 {
		합계 = 합계 + 포트폴리오.G순_금액().G값()
	}
	
	return F통화_생성(s.G통화_식별코드(), 합계)
}
func (s *S포트폴리오_모음) G총_금액() I통화 {
	if s.포트폴리오_모음 == nil { s.초기화() }
	
	합계 := float64(0.0)
	
	for _, 포트폴리오 := range s.포트폴리오_모음 {
		합계 = 합계 + 포트폴리오.G총_금액().G값()
	}
	
	return F통화_생성(s.G통화_식별코드(), 합계)
}