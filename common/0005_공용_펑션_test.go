package common

import (
	"reflect"
	"sync"
	"testing"
	"time"
)

func TestF슬라이스복사(테스트 *testing.T) {
	원본_슬라이스 := []string{"1번째", "2번째", "3번째"}
	복사본_슬라이스 := F슬라이스_복사(원본_슬라이스).([]string)

	if len(원본_슬라이스) != len(복사본_슬라이스) {
		테스트.Error("F슬라이스복사() 테스트 에러. 길이(len()) 불일치")
	}

	if 원본_슬라이스[0] != 복사본_슬라이스[0] ||
		원본_슬라이스[1] != 복사본_슬라이스[1] ||
		원본_슬라이스[2] != 복사본_슬라이스[2] {
		테스트.Error("F슬라이스복사() 테스트 에러. 내용 불일치")
	}

	복사본_슬라이스[0] = "변경된 1번째"

	if 원본_슬라이스[0] == 복사본_슬라이스[0] {
		테스트.Error("F슬라이스복사() 테스트 에러. 변경 독립성 없음.")
	}
}

func TestF이벤트전송(테스트 *testing.T) {
	테스트_채널 := make(chan int8, 10)
	defer close(테스트_채널)
	결과회신_채널 := make(chan int8, 10)
	defer close(결과회신_채널)
	송신_이벤트 := int8(99)

	var 대기그룹 sync.WaitGroup
	go 이벤트전송_테스트도우미(테스트, &대기그룹, 테스트_채널, 결과회신_채널)
	F이벤트전송(테스트_채널, 송신_이벤트)
	대기그룹.Wait()

	회신_이벤트, ok := <-결과회신_채널

	if !ok {
		테스트.Error("F이벤트전송() 테스트 에러. 테스트용 채널이 닫혔습니다.")
	}

	if 회신_이벤트 != 송신_이벤트 {
		테스트.Error("F이벤트전송() 테스트 에러. 보낸 값과 받은 값 불일치.")
	}
}

func 이벤트전송_테스트도우미(
	테스트 *testing.T,
	대기그룹 *sync.WaitGroup,
	수신채널 chan int8,
	회신채널 chan int8) {
	대기그룹.Add(1)
	defer 대기그룹.Done()

	수신값, ok := <-수신채널

	if !ok {
		테스트.Error("F이벤트전송_테스트도우미() 에러. 이벤트 수신에러.")
	}

	회신채널 <- 수신값
}

func TestF반올림(테스트 *testing.T) {
	if F반올림(9.49999, 0) != 9 {
		테스트.Error("F반올림() 테스트 에러 1.")
	}

	if F반올림(9.5, 0) != 10 {
		테스트.Error("F반올림() 테스트 에러 2.")
	}

	if F반올림(9.049999, 1) != 9 {
		테스트.Error("F반올림() 테스트 에러 3.")
	}

	if F반올림(9.05, 1) != 9.1 {
		테스트.Error("F반올림() 테스트 에러 4.")
	}
}

func TestF반올림_통화(테스트 *testing.T) {
	if F반올림_통화(9.044999) != 9.04 {
		테스트.Error("F반올림_통화() 테스트 에러. 2")
	}

	if F반올림_통화(9.045) != 9.05 {
		테스트.Error("F반올림_통화() 테스트 에러. 2")
	}
}

func TestF실수64to문자열(테스트 *testing.T) {
	if F실수64to문자열(16.62) != "16.62" {
		테스트.Error("F실수64to문자열() 테스트 에러.")
	}
}

func Test정수64to문자열(테스트 *testing.T) {
	if F정수64to문자열(16) != "16" {
		테스트.Error("F정수64to문자열() 테스트 에러.")
	}
}

func TestF부호없는정수64to문자열(테스트 *testing.T) {
	if F부호없는정수64to문자열(16) != "16" {
		테스트.Error("F부호없는정수64to문자열() 테스트 에러.")
	}
}

func TestF일자2문자열(테스트 *testing.T) {
	일자, _ := F문자열2일자("2000-01-01")

	if F일자2문자열(일자) != "2000-01-01" {
		테스트.Errorf("common.TestF일자2문자열() : 불일치. 예상값  %v, 실제값 %v.", 일자.Format("2006-01-02"), F일자2문자열(일자))
	}
}

func TestF문자열2실수64(테스트 *testing.T) {
	결과값, 에러 := F문자열2실수64("18.593")

	if 에러 != nil {
		테스트.Error("F문자열2실수64() 에러 1.")
	}

	if 결과값 != 18.593 {
		테스트.Error("F문자열2실수64() 에러 2.")
	}

	결과값, 에러 = F문자열2실수64("실수로 변환불가능한 문자열")

	if 에러 == nil {
		테스트.Error("F문자열2실수64() 에러 3.")
	}
}

func TestF문자열2정수64(테스트 *testing.T) {
	결과값, 에러 := F문자열2정수64("18")

	if 에러 != nil {
		테스트.Error("F문자열2정수64() 에러 1.")
	}

	if 결과값 != 18 {
		테스트.Error("F문자열2정수64() 에러 2.")
	}

	결과값, 에러 = F문자열2정수64("정수로 변환불가능한 문자열")

	if 에러 == nil {
		테스트.Error("F문자열2정수64() 에러 3.")
	}
}

func TestF문자열2부호없는정수64(테스트 *testing.T) {
	결과값, 에러 := F문자열2부호없는정수64("123456")

	if 에러 != nil {
		테스트.Error("F문자열2부호없는정수64() 에러 1.")
	}

	if 결과값 != 123456 {
		테스트.Error("F문자열2부호없는정수64() 에러 2.")
	}

	결과값, 에러 = F문자열2부호없는정수64("정수로 변환불가능한 문자열")

	if 에러 == nil {
		테스트.Error("F문자열2부호없는정수64() 에러 3.")
	}

	// 실수도 정수로 자동 변환하지 않고 일단 에러가 나도록 한다.
	결과값, 에러 = F문자열2부호없는정수64("123.456")

	if 에러 == nil {
		테스트.Error("F문자열2부호없는정수64() 에러 4.")
	}
}

func TestF문자열2일자(테스트 *testing.T) {
	F테스트_모드_시작()
	defer F테스트_모드_종료()

	일자, 에러 := F문자열2일자("2000-01-01")

	if 에러 != nil {
		테스트.Error("common.F문자열2일자() : F문자열2일자() 에러.")
	}

	if 일자.Format("2006-01-02") != "2000-01-01" {
		테스트.Errorf("common.F문자열2일자() : 일자 불일치. 예상값 2000-01-01, 실제값 %v.", 일자.Format("2006-01-02"))
	}

	일자, 에러 = F문자열2일자("일자로 변환 불가능한 문자열")

	if 에러 == nil {
		테스트.Error("common.F문자열2일자() : F문자열2일자() 에러가 발생하지 않음.")
	}
}

func TestF일자(테스트 *testing.T) {
	시점 := time.Now()
	일자 := F일자(시점)

	시점_문자열 := 시점.Format("2006-01-02")
	일자_문자열 := 일자.Format("2006-01-02")

	if 시점_문자열 != 일자_문자열 ||
		일자.Hour() != 0 ||
		일자.Minute() != 0 ||
		일자.Second() != 0 ||
		일자.Nanosecond() != 0 {
		테스트.Error("common.TestF일자() : F일자()의 결과값이 예상과 다릅니다.", 시점, 일자)
	}
}

func TestF파일경로로_파일찾기(테스트 *testing.T) {
	테스트용_CSV파일경로, 에러 := F파일경로로_파일찾기("/test_data/stock_code_info_korea_for_test_only.csv")
	if 에러 != nil {
		테스트.Error("common.TestF파일경로로_파일찾기() : F파일경로로_파일찾기() 에러.", 에러)
	}

	if 테스트용_CSV파일경로 == "" {
		테스트.Error("common.TestF파일경로로_파일찾기() : 파일을 찾지 못했습니다.")
	}
}

func TestF연월일_문자열(테스트 *testing.T) {
	일자, _ := time.Parse("2006-01-02", "2013-11-01")

	연도, 월, 일 := F연월일_문자열(일자)

	if 연도 != "2013" {
		테스트.Errorf("TestF연월일_분리된_날짜_문자열() : 연도 문자열 불일치. 예상값 2013, 실제값 %v.", 연도)
	}

	if 월 != "11" {
		테스트.Errorf("TestF연월일_분리된_날짜_문자열() : 월 문자열 불일치. 예상값 11, 실제값 %v.", 월)
	}

	if 일 != "01" {
		테스트.Errorf("TestF연월일_분리된_날짜_문자열() : 일 문자열 불일치. 예상값 01, 실제값 %v.", 일)
	}
}

func TestF연월일_정수(테스트 *testing.T) {
	일자, _ := time.Parse("2006-01-02", "2013-11-01")

	연도, 월, 일 := F연월일_정수(일자)

	if 연도 != 2013 {
		테스트.Errorf("TestF연월일_정수() : 연도 불일치. 예상값 2013, 실제값 %v.", 연도)
	}

	if 월 != 11 {
		테스트.Errorf("TestF연월일_정수() : 월 불일치. 예상값 11, 실제값 %v.", 월)
	}

	if 일 != 1 {
		테스트.Errorf("TestF연월일_정수() : 일 불일치. 예상값 1, 실제값 %v.", 일)
	}
}

func TestF중첩된_외부_슬라이스_제거(테스트 *testing.T) {
	슬라이스 := make([]interface{}, 2)
	슬라이스[0] = 1
	슬라이스[1] = "one"
	
	for 반복횟수 := 0; 반복횟수 < 20; 반복횟수++ {
		중첩된_슬라이스 := make([]interface{}, 1)
		중첩된_슬라이스[0] = 슬라이스
		슬라이스 = 중첩된_슬라이스
	}

	외부_슬라이스_제거된_결과 := F중첩된_외부_슬라이스_제거(슬라이스)
	
	if len(외부_슬라이스_제거된_결과) != 2 {
		테스트.Errorf("TestF중첩된_외부_슬라이스_제거() : len(외부_슬라이스_제거된_결과) 불일치. 예상값 2, 실제값 %v", len(외부_슬라이스_제거된_결과))
	}
	
	원소1 := 외부_슬라이스_제거된_결과[0]
	원소1_형식 := reflect.TypeOf(원소1).String()
	
	원소2 := 외부_슬라이스_제거된_결과[1]
	원소2_형식 := reflect.TypeOf(원소2).String()
	
	if 원소1_형식 != "int" {
		테스트.Errorf("TestF중첩된_외부_슬라이스_제거() : 원소1_형식 불일치. 예상값 int, 실제값 %v", 원소1_형식)
	}
	
	if 원소2_형식 != "string" {
		테스트.Errorf("TestF중첩된_외부_슬라이스_제거() : 원소2_형식 불일치. 예상값 int, 실제값 %v", 원소2_형식)
	}
	
	원소1_값 := 원소1.(int)
	원소2_값 := 원소2.(string)
	
	if 원소1_값 != 1 {
		테스트.Errorf("TestF중첩된_외부_슬라이스_제거() : 원소1_값 불일치. 예상값 1, 실제값 %v", 원소1_값)
	}
	
	if 원소2_값 != "one" {
		테스트.Errorf("TestF중첩된_외부_슬라이스_제거() : 원소2_값 불일치. 예상값 one, 실제값 %v", 원소2_값)
	}
}