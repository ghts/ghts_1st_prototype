package common

import (
	"testing"
	"time"
)

func TestC정수(테스트 *testing.T) {
	정수형_상수 := F정수_생성(1)

	정수1 := 정수형_상수.G값()
	if 정수1 != 1 {
		테스트.Error("F정수_생성() 에러 1")
	}
	정수1++

	정수2 := 정수형_상수.G값()
	if 정수2 != 1 {
		테스트.Error("F정수_생성() 에러 2")
	}
}

func TestC정수64(테스트 *testing.T) {
	정수64형_상수 := F정수64_생성(1)

	정수1 := 정수64형_상수.G값()
	if 정수1 != 1 {
		테스트.Error("F정수64_생성() 에러 1")
	}
	정수1++

	정수2 := 정수64형_상수.G값()
	if 정수2 != 1 {
		테스트.Error("F정수64_생성() 에러 2")
	}
}

func TestC정수32(테스트 *testing.T) {
	정수32형_상수 := F정수32_생성(1)

	정수1 := 정수32형_상수.G값()
	if 정수1 != 1 {
		테스트.Error("F정수32_생성() 에러 1")
	}
	정수1++

	정수2 := 정수32형_상수.G값()
	if 정수2 != 1 {
		테스트.Error("F정수32_생성() 에러 2")
	}
}

func TestC정수16(테스트 *testing.T) {
	정수16형_상수 := F정수16_생성(1)

	정수1 := 정수16형_상수.G값()
	if 정수1 != 1 {
		테스트.Error("F정수16_생성() 에러 1")
	}
	정수1++

	정수2 := 정수16형_상수.G값()
	if 정수2 != 1 {
		테스트.Error("F정수16_생성() 에러 2")
	}
}

func TestC정수8(테스트 *testing.T) {
	정수8형_상수 := F정수8_생성(1)

	정수1 := 정수8형_상수.G값()
	if 정수1 != 1 {
		테스트.Error("F정수8_생성() 에러 1")
	}
	정수1++

	정수2 := 정수8형_상수.G값()
	if 정수2 != 1 {
		테스트.Error("F정수8_생성() 에러 2")
	}
}

func TestC부호없는_정수(테스트 *testing.T) {
	부호없는_정수형_상수 := F부호없는_정수_생성(1)

	정수1 := 부호없는_정수형_상수.G값()
	if 정수1 != 1 {
		테스트.Error("F부호없는_정수_생성() 에러 1")
	}
	정수1++

	정수2 := 부호없는_정수형_상수.G값()
	if 정수2 != 1 {
		테스트.Error("F부호없는_정수_생성() 에러 2")
	}
}

func TestC부호없는_정수64(테스트 *testing.T) {
	부호없는_정수64형_상수 := F부호없는_정수64_생성(1)
	
	정수1 := 부호없는_정수64형_상수.G값()
	if 정수1 != 1 {
		테스트.Error("F부호없는_정수64_생성() 에러 1")
	}
	정수1++

	정수2 := 부호없는_정수64형_상수.G값()
	if 정수2 != 1 {
		테스트.Error("F부호없는_정수64_생성() 에러 2")
	}
}

func TestC부호없는_정수32(테스트 *testing.T) {
	부호없는_정수32형_상수 := F부호없는_정수32_생성(1)

	정수1 := 부호없는_정수32형_상수.G값()
	if 정수1 != 1 {
		테스트.Error("F부호없는_정수32_생성() 에러 1")
	}
	정수1++
	
	정수2 := 부호없는_정수32형_상수.G값()
	if 정수2 != 1 {
		테스트.Error("F부호없는_정수32_생성() 에러 2")
	}
}

func TestC부호없는_정수16(테스트 *testing.T) {
	부호없는_정수16형_상수 := F부호없는_정수16_생성(1)
	
	정수1 := 부호없는_정수16형_상수.G값()
	if 정수1 != 1 {
		테스트.Error("F부호없는_정수16_생성() 에러 1")
	}
	정수1++

	정수2 := 부호없는_정수16형_상수.G값()
	if 정수2 != 1 {
		테스트.Error("F부호없는_정수16_생성() 에러 2")
	}
}

func TestC부호없는_정수8(테스트 *testing.T) {
	부호없는_정수8형_상수 := F부호없는_정수8_생성(1)

	정수1 := 부호없는_정수8형_상수.G값()
	if 정수1 != 1 {
		테스트.Error("F부호없는_정수8_생성() 에러 1")
	}
	정수1++

	정수2 := 부호없는_정수8형_상수.G값()
	if 정수2 != 1 {
		테스트.Error("F부호없는_정수8_생성() 에러 2")
	}
}

/* func TestC실수(테스트 *testing.T) {
	실수형_상수 := F실수_생성(1.0)
	
	실수1 := 실수형_상수.G값()
	if 실수1 != 1.0 {
		테스트.Error("F실수_생성() 에러 1")
	}
	실수1 = 실수1 + 10.0

	실수2 := 실수형_상수.G값()
	if 실수2 != 1.0 {
		테스트.Error("F실수_생성() 에러 2")
	}
} */

func TestC실수64(테스트 *testing.T) {
	실수64형_상수 := F실수64_생성(1.0)
	
	실수1 := 실수64형_상수.G값()
	if 실수1 != 1.0 {
		테스트.Error("F실수64_생성() 에러 1")
	}
	실수1 = 실수1 + 10.0
	
	실수2 := 실수64형_상수.G값()
	if 실수2 != 1.0 {
		테스트.Error("F실수64_생성() 에러 2")
	}
	
	실수값 := 100.00001
	실수64형_상수 = F실수64_생성(실수값)
	
	if 실수64형_상수.G값() != 실수값 {
		테스트.Errorf("TestC실수64() : G값() 불일치.예상값 %v, 실제값 %v.", 실수값, 실수64형_상수.G값())
	}
}

func TestC실수32(테스트 *testing.T) {
	실수32형_상수 := F실수32_생성(1.0)
	
	실수1 := 실수32형_상수.G값()
	if 실수1 != 1.0 {
		테스트.Error("F실수32_생성() 에러 1")
	}
	실수1 = 실수1 + 10.0

	실수2 := 실수32형_상수.G값()
	if 실수2 != 1.0 {
		테스트.Error("F실수32_생성() 에러 2")
	}
}

func TestC고정소숫점(테스트 *testing.T) {
	초기값 := float64(1000000.2003)
	소숫점_이하_자릿수 := 2
	고정소숫점형_상수 := F고정소숫점_생성(초기값, 소숫점_이하_자릿수)
	
	if 고정소숫점형_상수.String() != "1000000.20" {
		테스트.Errorf("common.TestC고정소숫점() : 생성값 오류. 예상값 %v, 실제값 %v", "1000000.20", 고정소숫점형_상수.String())
	}
	
	소숫점_이하_자릿수1 := 고정소숫점형_상수.G소숫점_이하_자릿수()
	고정소숫점1 := 고정소숫점형_상수.G값()
	실수1 := 고정소숫점형_상수.G실수값()
	
	if 소숫점_이하_자릿수1 != 2 ||
		고정소숫점1.FloatString(5) != "1000000.20000" ||
		실수1 != 1000000.20  {
		테스트.Errorf("common.TestC고정소숫점() : 처음 읽어온 값 불일치. " +
							"소숫점_이하_자릿수 %v, 고정소숫점값 %v, 실수값 %v.",
						소숫점_이하_자릿수1, 고정소숫점1.FloatString(5), 실수1)
	}
	
	// 값 변경. 이후에도 상수값이 변하지 않는 지 확인
	소숫점_이하_자릿수1 = 소숫점_이하_자릿수1 + 100
	고정소숫점1.Set(big.NewRat(101, 1))
	실수1 = 실수1 + 100.0
	
	소숫점_이하_자릿수2 := 고정소숫점형_상수.G소숫점_이하_자릿수()
	고정소숫점2 := 고정소숫점형_상수.G값()
	실수2 := 고정소숫점형_상수.G실수값()
	
	if 소숫점_이하_자릿수2 != 2 ||
		고정소숫점2.FloatString(5) != "1000000.20000" ||
		실수2 != 1000000.20  {
		log.Printf("고정소숫점형_상수 %v, 고정소숫점1 %v, 고정소숫점2 %v.", 고정소숫점형_상수, 고정소숫점1, 고정소숫점2)
		
		테스트.Errorf("common.TestC고정소숫점() : 값 변경 후 불일치. " +
							"소숫점_이하_자릿수 %v, 고정소숫점값 %v, 실수값 %v.",
						소숫점_이하_자릿수2, 고정소숫점2.FloatString(5), 실수2)
	}
	
}

func TestC문자열(테스트 *testing.T) {
	문자열형_상수 := F문자열_생성("원래 문자열")

	문자열1 := 문자열형_상수.G값()
	if 문자열1 != "원래 문자열" {
		테스트.Error("F문자열_생성() 에러 1")
	}
	문자열1 = 문자열1 + "변경된 문자열"

	문자열2 := 문자열형_상수.G값()
	if 문자열2 != "원래 문자열" {
		테스트.Error("F문자열_생성() 에러 2")
	}
}

func TestC부울(테스트 *testing.T) {
	부울형_상수 := F참거짓_생성(true)

	부울1 := 부울형_상수.G값()
	if 부울1 != true {
		테스트.Error("F부울_생성() 에러 1")
	}
	부울1 = !부울1

	부울2 := 부울형_상수.G값()
	if 부울2 != true {
		테스트.Error("F부울_생성() 에러 2")
	}
}

func TestC시점(테스트 *testing.T) {
	시점, _ := time.Parse("2006-01-02", "2000-01-01")

	시점형_상수 := F시점_생성(시점)

	시점1 := 시점형_상수.G값()
	if !시점1.Equal(시점) {
		테스트.Error("F시점_생성() 에러 1")
	}
	시점1 = 시점1.AddDate(0, 0, 1)

	시점2 := 시점형_상수.G값()
	if !시점2.Equal(시점) {
		테스트.Error("F시점_생성() 에러 2")
	}
}