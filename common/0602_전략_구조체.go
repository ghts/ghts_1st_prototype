package common

type S신호모음 struct { // 그냥 슬라이스([])로 충분한가? 아니면 별도의 구조체가 필요할까?
	초도신호   *C신호
	후속신호모음 []*C신호
}

func (s *S신호모음) S후속신호추가(신호 *C신호) {
	s.후속신호모음 = append(s.후속신호모음, 신호)
}

type S신호_주문_결과 struct {
	식별코드 uint64
	신호   *C신호
	주문   *C주문
	결과   *C주문처리결과
}

func (s *S신호_주문_결과) G식별코드() uint64     { return s.식별코드 }
func (s *S신호_주문_결과) G신호() *C신호         { return s.신호 }
func (s *S신호_주문_결과) G주문() *C주문         { return s.주문 }
func (s *S신호_주문_결과) G결과() *C주문처리결과     { return s.결과 }
func (s *S신호_주문_결과) S식별코드(식별코드 uint64) { s.식별코드 = 식별코드 }
func (s *S신호_주문_결과) S신호(신호 *C신호)       { s.신호 = 신호 }
func (s *S신호_주문_결과) S주문(주문 *C주문)       { s.주문 = 주문 }
func (s *S신호_주문_결과) S결과(결과 *C주문처리결과)   { s.결과 = 결과 }

/* func (s *S신호_주문_결과) M신호주문결과_상수형_생성() *C신호_주문_결과 {
	return F신호주문결과_생성(s.식별코드, s.신호, s.주문, s.결과)
} */
func (s *S신호_주문_결과) M매매내역_생성() *C매매내역 {
	체결수량 := int64(s.결과.체결수량.G값())

	if (s.주문.G주문종류() < 20 && 체결수량 < 0) || // 매수
		(s.주문.G주문종류() > 20 && 체결수량 > 0) { // 매도
		체결수량 = 체결수량 * -1
	} // 매수는 체결수량을 (+)로, 매도는 체결수량을 (-)로 설정.

	return F매매내역_생성(
		s.식별코드,
		s.결과.체결시점.G값(),
		s.신호.G가격정보시점(),
		s.신호.G종목(),
		s.결과.체결단가.G값(),
		체결수량)
}

type S포트폴리오 struct {
	식별코드          uint64
	포트폴리오_구성요소_모음 []*S포트폴리오_구성요소
}

func (s *S포트폴리오) G식별코드() uint64 { return s.식별코드 }
func (s *S포트폴리오) G내용() []*S포트폴리오_구성요소 {
	return F슬라이스_복사(s.포트폴리오_구성요소_모음).([]*S포트폴리오_구성요소)
}
func (s *S포트폴리오) M포트폴리오_구성요소_추가(포트폴리오_구성요소 *S포트폴리오_구성요소) {
	s.포트폴리오_구성요소_모음 = append(s.포트폴리오_구성요소_모음, 포트폴리오_구성요소)
}
func (s *S포트폴리오) G평가액() float64 {
	var 포트폴리오_구성요소 *S포트폴리오_구성요소
	var 평가액 float64 = 0.0

	for _, 포트폴리오_구성요소 = range s.포트폴리오_구성요소_모음 {
		평가액 = 평가액 + 포트폴리오_구성요소.G평가액()
	}

	return 평가액
}

/*
func (s *S포트폴리오) G매입금액() float64 {
	var 포트폴리오_구성요소 *S포트폴리오_구성요소
	var 매입금액 float64 = 0.0

	for _, 포트폴리오_구성요소 = range s.포트폴리오_구성요소_모음 {
		매입금액 = 매입금액 + 포트폴리오_구성요소.G매입금액()
	}

	return 매입금액
}
func (s *S포트폴리오) 일평균수익률() float64   { panic("TODO") }
func (s *S포트폴리오) 표준편차() float64     { panic("TODO") }
func (s *S포트폴리오) Sharpe비율() float64 { panic("TODO") }
func (s *S포트폴리오) 연평균수익률() float64   { panic("TODO") }
*/

func F포트폴리오_생성(식별코드 uint64) *S포트폴리오 {
	s := new(S포트폴리오)
	s.식별코드 = 식별코드

	return s
}

type S포트폴리오_구성요소 struct {
	식별코드  uint64
	계좌    *C계좌
	종목    *C종목
	전일_종가 float64
	수량    int64
	//매매내역 []*C매매내역	// 계속 누적되는 매매내역을 계속 메모리에 하기는 사실상 좀 어려울 듯...
}

func (s *S포트폴리오_구성요소) G식별코드() uint64   { return s.식별코드 }
func (s *S포트폴리오_구성요소) G계좌() *C계좌       { return s.계좌 }
func (s *S포트폴리오_구성요소) G종목() *C종목       { return s.종목 }
func (s *S포트폴리오_구성요소) G전일_종가() float64 { return s.전일_종가 }
func (s *S포트폴리오_구성요소) G수량() int64      { return s.수량 }
func (s *S포트폴리오_구성요소) S수량(수량 int64)    { s.수량 = 수량 }
func (s *S포트폴리오_구성요소) G평가액() float64 {
	return s.G전일_종가() * float64(s.수량)
}

func F포트폴리오_구성요소_생성(
	식별코드 uint64,
	계좌 *C계좌,
	종목 *C종목,
	수량 int64,
	전일_종가 float64) *S포트폴리오_구성요소 {
	s := new(S포트폴리오_구성요소)
	s.식별코드 = 식별코드
	s.계좌 = 계좌
	s.종목 = 종목
	s.수량 = 수량
	s.전일_종가 = 전일_종가

	return s
}

/* func (s *S포트폴리오_구성요소) G매매내역() []*C매매내역 {
	return F슬라이스복사(s.매매내역).([]*C매매내역)
} */
/* func (s *S포트폴리오_구성요소) S매매내역추가(매매내역 *C매매내역) {
	s.매매내역 = append(s.매매내역, 매매내역)
} */
/* func (s *S포트폴리오_구성요소) G매입금액() float64 {
	// 평균매입단가 계산할 때 사용.
	// 매매내역을 시간에 대해서 역순으로 정렬해서 매매수량이 현재수량과
	// 일치하는 시점이 될 때까지 매매금액을 더하면 된다.
	panic("TODO")

	return 0.0
} */
/* func (s *S포트폴리오_구성요소) G평균매입단가() float64 {
	return s.G매입금액() / float64(s.수량)
} */
