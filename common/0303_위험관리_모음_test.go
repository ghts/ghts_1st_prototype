package common

import (
	"testing"
)

func TestS위험관리_모음(테스트 *testing.T) {	
	위험관리_모음 := F위험관리_모음_생성(30, "테스트용_위험관리_모음")
	
	var 위험관리_인터페이스 I위험관리 = 위험관리_모음; 위험관리_인터페이스.G식별코드()
	
	if 위험관리_모음.G식별코드() != 30 {
		테스트.Error("common.TestS위험관리_모음() : G식별코드() 에러.")
	}
	
	if 위험관리_모음.G이름() != "테스트용_위험관리_모음" {
		테스트.Error("common.TestS위험관리_모음() : G이름() 에러.")
	}
	
	전략 := F테스트용_비어있는_전략(100)
	종목 := F종목_동화약품()
	수량 := int64(100)
	단가 := float64(100.0005)
	
	매개변수_모음 := new(S매개변수_모음)
	매개변수_모음.S추가("정수", int(1))
	매개변수_모음.S추가("실수", float64(1.1))
	매개변수_모음.S추가("문자열", "테스트용_문자열")	
	
	테스트용_위험관리_매개변수 := F위험관리_매개변수_생성(전략, 종목, 수량, 단가, 매개변수_모음)
	
	
	// 아무 조정없이 모두 통과
	위험관리1 := new(S테스트용_위험관리)
	위험관리1.M식별코드 = 100
	위험관리1.M이름 = "위험관리1"
	위험관리1.	M필요한_매개변수_모음 = []string{"정수1", "실수1", "문자열1"}
	위험관리1.M검토_펑션 = 
	func(위험관리_매개변수 *S위험관리_매개변수) (*S위험관리_검토결과, error) {
		통과 := true
		수량조정_필요 := false
		수량 := int64(0)
		금액조정_필요 := false
		금액 := float64(0.0)
		매개변수_모음 := new(S매개변수_모음)
		매개변수_모음.S추가("정수1", 1)
		매개변수_모음.S추가("실수1", 1.1)
		매개변수_모음.S추가("문자열1", "one")
	
		검토_결과 := F위험관리_검토결과_생성(
					통과, 수량조정_필요, 수량, 금액조정_필요, 금액, 매개변수_모음)
		
		return 검토_결과, nil
	}
	
	위험관리_모음.S추가(위험관리1)
	
	if len(위험관리_모음.G필요한_매개변수_모음()) != 3 {
		테스트.Errorf("common.TestS위험관리_모음() : len(G필요한_매개변수_모음()) 불일치. 예상값 3, 실제값 %v.",  len(위험관리_모음.G필요한_매개변수_모음()))
	}
	
	검토_결과, _ := 위험관리_모음.G검토(테스트용_위험관리_매개변수)
	
	if !검토_결과.G통과() ||
		검토_결과.G수량조정_필요() ||
		검토_결과.G수량() != 0 ||
		검토_결과.G금액조정_필요() ||
		검토_결과.G금액() != 0.0 {
		테스트.Error("common.TestS위험관리_모음() : 검토 결과 불일치 1.")
	}
 	
	// 수량조정 필요
	위험관리2 := new(S테스트용_위험관리)
	위험관리2.M식별코드 = 200
	위험관리2.M이름 = "위험관리2"
	위험관리2.	M필요한_매개변수_모음 = []string{"정수2", "실수2", "문자열2"}
	위험관리2.M검토_펑션 = 
	func(위험관리_매개변수 *S위험관리_매개변수) (*S위험관리_검토결과, error) {
		통과 := true
		수량조정_필요 := true
		수량 := int64(10)
		금액조정_필요 := false
		금액 := float64(0.0)
		매개변수_모음 := new(S매개변수_모음)
		매개변수_모음.S추가("정수2", 2)
		매개변수_모음.S추가("실수2", 2.2)
		매개변수_모음.S추가("문자열2", "two")
	
		검토_결과 := F위험관리_검토결과_생성(
					통과, 수량조정_필요, 수량, 금액조정_필요, 금액, 매개변수_모음)
		
		return 검토_결과, nil
	}
	
	위험관리_모음.S추가(위험관리2)
	
	if len(위험관리_모음.G필요한_매개변수_모음()) != 6 {
		테스트.Errorf("common.TestS위험관리_모음() : len(G필요한_매개변수_모음()) 불일치. 예상값 6, 실제값 %v.",  len(위험관리_모음.G필요한_매개변수_모음()))
	}
	
	검토_결과, _ = 위험관리_모음.G검토(테스트용_위험관리_매개변수)
	
	if !검토_결과.G통과() ||
		!검토_결과.G수량조정_필요() ||
		검토_결과.G수량() != 10 ||
		검토_결과.G금액조정_필요() ||
		검토_결과.G금액() != 0.0 {
		테스트.Error("common.TestS위험관리_모음() : 검토 결과 불일치 2.")
	}
	
	// 금액조정 필요
	위험관리3 := new(S테스트용_위험관리)
	위험관리3.M식별코드 = 300
	위험관리3.M이름 = "위험관리3"
	위험관리3.	M필요한_매개변수_모음 = []string{"정수3", "실수3", "문자열3"}
	위험관리3.M검토_펑션 = 
	func(위험관리_매개변수 *S위험관리_매개변수) (*S위험관리_검토결과, error) {
		통과 := true
		수량조정_필요 := false
		수량 := int64(0)
		금액조정_필요 := true
		금액 := float64(100.0)
		매개변수_모음 := new(S매개변수_모음)
		매개변수_모음.S추가("정수3", 3)
		매개변수_모음.S추가("실수3", 3.3)
		매개변수_모음.S추가("문자열3", "three")
	
		검토_결과 := F위험관리_검토결과_생성(
					통과, 수량조정_필요, 수량, 금액조정_필요, 금액, 매개변수_모음)
		
		return 검토_결과, nil
	}
	
	위험관리_모음.S추가(위험관리3)
	
	if len(위험관리_모음.G필요한_매개변수_모음()) != 9 {
		테스트.Errorf("common.TestS위험관리_모음() : len(G필요한_매개변수_모음()) 불일치. 예상값 9, 실제값 %v.",  len(위험관리_모음.G필요한_매개변수_모음()))
	}
	
	검토_결과, _ = 위험관리_모음.G검토(테스트용_위험관리_매개변수)
	
	if !검토_결과.G통과() ||
		!검토_결과.G수량조정_필요() ||
		검토_결과.G수량() != 10 ||
		!검토_결과.G금액조정_필요() ||
		검토_결과.G금액() != 100.0 {
		테스트.Error("common.TestS위험관리_모음() : 검토 결과 불일치 3.")
	}
	
	// 통과 거부 및 금액 변동 없어야 함.
	위험관리4 := new(S테스트용_위험관리)
	위험관리4.M식별코드 = 400
	위험관리4.M이름 = "위험관리4"
	위험관리4.	M필요한_매개변수_모음 = []string{"정수4", "실수4", "문자열4"}
	위험관리4.M검토_펑션 = 
	func(위험관리_매개변수 *S위험관리_매개변수) (*S위험관리_검토결과, error) {
		통과 := false
		수량조정_필요 := false
		수량 := int64(0)
		금액조정_필요 := true
		금액 := float64(400.0)
		매개변수_모음 := new(S매개변수_모음)
		매개변수_모음.S추가("정수4", 4)
		매개변수_모음.S추가("실수4", 4.4)
		매개변수_모음.S추가("문자열4", "four")
	
		검토_결과 := F위험관리_검토결과_생성(
					통과, 수량조정_필요, 수량, 금액조정_필요, 금액, 매개변수_모음)
		
		return 검토_결과, nil
	}
	
	위험관리_모음.S추가(위험관리4)
	
	if len(위험관리_모음.G필요한_매개변수_모음()) != 12 {
		테스트.Errorf("common.TestS위험관리_모음() : len(G필요한_매개변수_모음()) 불일치. 예상값 12, 실제값 %v.",  len(위험관리_모음.G필요한_매개변수_모음()))
	}
	
	검토_결과, _ = 위험관리_모음.G검토(테스트용_위험관리_매개변수)
	
	if 검토_결과.G통과() ||
		!검토_결과.G수량조정_필요() ||
		검토_결과.G수량() != 10 ||
		!검토_결과.G금액조정_필요() ||
		검토_결과.G금액() != 100.0 {
		테스트.Error("common.TestS위험관리_모음() : 검토 결과 불일치 4.")
	}
}