package common

import (
	"log"
)

func F위험관리_모음_생성(식별코드 uint64, 이름 string) *S위험관리_모음 {
	s := new(S위험관리_모음)
	s.식별코드 = 식별코드
	s.이름 = 이름
	s.초기화()
	
	return s
}

// 여러 개의 위험관리 모듈을 마치 하나처럼 관리할 수 있게 하는 용도.
type S위험관리_모음 struct {
	식별코드 uint64
	이름 string
	위험관리_모음 []I위험관리
}
func (s *S위험관리_모음) 초기화() {
	if s.위험관리_모음 == nil {
		s.위험관리_모음 = make([]I위험관리, 0)
	}
}
func (s *S위험관리_모음) S추가(위험관리 I위험관리) {
	if s.위험관리_모음 == nil { s.초기화() }

	s.위험관리_모음 = append(s.위험관리_모음, 위험관리)
}

func (s *S위험관리_모음) G식별코드() uint64 { return s.식별코드 }
func (s *S위험관리_모음) G이름() string { return s.이름 }
func (s *S위험관리_모음) G필요한_매개변수_모음() []string {
	if s.위험관리_모음 == nil { s.초기화() }

	// 우선 맵에 저장하여 중복을 없앤다.
	맵 := make(map[string]string)
	
	for _, 위험관리 := range s.위험관리_모음 {
		필요한_매개변수_모음 := 위험관리.G필요한_매개변수_모음()
		for _, 매개변수_이름 := range 필요한_매개변수_모음 {
			if 매개변수_이름 != "" {
				맵[매개변수_이름] = 매개변수_이름
			}			
		}
	}
	
	// 중복없는 맵 데이터를 슬라이스로 변환하여 반환.
	슬라이스 := make([]string, 0)
	
	for _, 매개변수_이름 := range 맵 {
		슬라이스 = append(슬라이스, 매개변수_이름)
	}
	
	return 슬라이스
}
func (s *S위험관리_모음) G검토(위험관리_매개변수 *S위험관리_매개변수) (*S위험관리_검토결과, error) {
	통과_반환값 := true
	수량조정_필요_반환값 := false
	금액조정_필요_반환값 := false
	var 수량_반환값 int64 = 0
	var 금액_반환값 I통화 = F통화_생성(위험관리_매개변수.G단가().G식별코드(), 0.0)
	매개변수_모음_반환값 := new(S매개변수_모음)
	
	for _, 위험관리 := range s.위험관리_모음 {
		검토결과, 에러 := 위험관리.G검토(위험관리_매개변수)
		if 에러 != nil {
			log.Println("common.S위험관리_모음.G검토() : 에러 발생.")
			log.Printf("에러발생 원소 : 식별코드 %v, 이름 %v.", 위험관리.G식별코드(), 위험관리.G이름())
			log.Println(에러)
			//매개변수도 기록해야 하나?
			
			return nil, 에러
		}
		
		if !검토결과.G통과() { 통과_반환값 = false }
		if 검토결과.G수량조정_필요() {
			수량조정_필요_반환값 = true
			if 수량_반환값 == 0 ||
				수량_반환값 > 검토결과.G수량() {
				// 수량은 위험관리가 허용한 수량 중 최소값.
				수량_반환값 = 검토결과.G수량()
			}
		}
		if 검토결과.G금액조정_필요() {
			금액조정_필요_반환값 = true
			
			검토결과_금액 := 검토결과.G금액()
			if 금액_반환값.G값() == 0.0 ||
				금액_반환값.G값() > 검토결과_금액.G값() {
				// 금액은 위험관리가 허용한 금액 중 최소값.
				금액_반환값 = 검토결과_금액
			}
		}
		
		검토결과_매개변수_모음 := 검토결과.G매개변수_모음()
		for _, 매개변수 := range 검토결과_매개변수_모음 {
			매개변수_모음_반환값.S추가(매개변수.G이름(), 매개변수.G가변형())
		}
	}
	
	검토결과_반환값 := 
		F위험관리_검토결과_생성(통과_반환값, 
							수량조정_필요_반환값, 
							수량_반환값, 
							금액조정_필요_반환값,
							금액_반환값,
							매개변수_모음_반환값)
							
	return 검토결과_반환값, nil
}