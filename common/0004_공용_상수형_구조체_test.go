package common

import (
	"testing"
	"time"
)

func TestF증권사_생성(테스트 *testing.T) {
	식별코드 := uint64(1)
	표시명칭 := "아무개 증권사"
	사업자등록번호 := "12345678-90123456"

	증권사 := F증권사_생성(식별코드, 표시명칭, 사업자등록번호)

	식별코드1 := 증권사.G식별코드()
	if 식별코드1 != 식별코드 {
		테스트.Error("F증권사_생성().G식별코드() 에러 1")
	}
	식별코드1 = uint64(100)

	식별코드2 := 증권사.G식별코드()
	if 식별코드2 != 식별코드 {
		테스트.Error("F증권사_생성().G식별코드() 에러 2")
	}

	표시명칭1 := 증권사.G표시명칭()
	if 표시명칭1 != 표시명칭 {
		테스트.Error("F증권사_생성().G표시명칭() 에러 1")
	}
	표시명칭1 = "변경된 표시명칭"

	표시명칭2 := 증권사.G표시명칭()
	if 표시명칭2 != 표시명칭 {
		테스트.Error("F증권사_생성().G표시명칭() 에러 2")
	}

	사업자등록번호1 := 증권사.G사업자등록번호()
	if 사업자등록번호1 != 사업자등록번호 {
		테스트.Error("F증권사_생성().G사업자등록번호() 에러 1")
	}
	사업자등록번호1 = "변경된 사업자등록번호"

	사업자등록번호2 := 증권사.G사업자등록번호()
	if 사업자등록번호2 != 사업자등록번호 {
		테스트.Error("F증권사_생성().G사업자등록번호() 에러 2")
	}
}

func TestF계좌_생성(테스트 *testing.T) {
	식별코드 := uint64(11)
	표시명칭 := "원래 계좌명칭"
	증권사 := F증권사_가상_1()
	계좌번호 := "123456-789012"

	계좌 := F계좌_생성(식별코드, 표시명칭, 증권사, 계좌번호)

	식별코드1 := 계좌.G식별코드()
	if 식별코드1 != 식별코드 {
		테스트.Error("F계좌_생성().G식별코드() 에러 1")
	}
	식별코드1 = uint64(111)

	식별코드2 := 계좌.G식별코드()
	if 식별코드2 != 식별코드 {
		테스트.Error("F계좌_생성().G식별코드() 에러 2")
	}

	표시명칭1 := 계좌.G표시명칭()
	if 표시명칭1 != 표시명칭 {
		테스트.Error("F계좌_생성().G표시명칭() 에러 1")
	}
	표시명칭1 = "변경된 표시명칭"

	표시명칭2 := 계좌.G표시명칭()
	if 표시명칭2 != 표시명칭 {
		테스트.Error("F계좌_생성().G표시명칭() 에러 2")
	}

	증권사1 := 계좌.G증권사()
	if 증권사1.G식별코드() != 증권사.G식별코드() ||
		증권사1.G표시명칭() != 증권사.G표시명칭() ||
		증권사1.G사업자등록번호() != 증권사.G사업자등록번호() {
		테스트.Error("F계좌_생성().G증권사() 에러 1")
	}
	증권사1 = F증권사_가상_2()

	증권사2 := 계좌.G증권사()
	if 증권사2.G식별코드() != 증권사.G식별코드() ||
		증권사2.G표시명칭() != 증권사.G표시명칭() ||
		증권사2.G사업자등록번호() != 증권사.G사업자등록번호() {
		테스트.Error("F계좌_생성().G증권사() 에러 2")
	}

	계좌번호1 := 계좌.G계좌번호()
	if 계좌번호1 != 계좌번호 {
		테스트.Error("F계좌_생성().G계좌번호() 에러 1")
	}
	계좌번호1 = "변경된 계좌번호"

	계좌번호2 := 계좌.G계좌번호()
	if 계좌번호2 != 계좌번호 {
		테스트.Error("F계좌_생성().G계좌번호() 에러 2")
	}
}

func TestF가격정보_생성(테스트 *testing.T) {
	시점, _ := time.Parse("2006-01-02 15:04:05", "2014-03-17 13:32:35")
	종목 := F종목_동화약품()
	가격 := float64(5750) // 테스트를 위한 가상의 가격임.
	거래량 := uint64(8200) // 테스트를 위한 가상의 거래량임.

	가격정보 := F가격정보_생성(시점, 종목, 가격, 거래량)

	시점1 := 가격정보.G시점()
	if 시점1 != 시점 ||
		시점1 != 가격정보.시점.G값() {
		테스트.Error("F가격정보_생성().G시점() 에러 1")
	}
	시점1, _ = time.Parse("2006-01-02 15:04:05", "2000-01-01 00:00:00")

	시점2 := 가격정보.G시점()
	if 시점2 != 시점 ||
		시점2 != 가격정보.시점.G값() {
		테스트.Error("F가격정보_생성().G시점() 에러 2")
	}

	종목1 := 가격정보.G종목()
	if 종목1.G식별코드() != 종목.G식별코드() ||
		종목1.G식별코드() != 가격정보.종목.G식별코드() ||
		종목1.G종목코드() != 종목.G종목코드() ||
		종목1.G종목코드() != 가격정보.종목.G종목코드() {
		테스트.Error("F가격정보_생성().G종목() 에러 1")
	}
	종목1 = F종목_삼성전자()

	종목2 := 가격정보.G종목()
	if 종목2.G식별코드() != 종목.G식별코드() ||
		종목2.G식별코드() != 가격정보.종목.G식별코드() ||
		종목2.G종목코드() != 종목.G종목코드() ||
		종목2.G종목코드() != 가격정보.종목.G종목코드() {
		테스트.Error("F가격정보_생성().G종목() 에러 2")
	}

	가격1 := 가격정보.G가격()
	if 가격1 != 가격 ||
		가격1 != 가격정보.가격.G값() ||
		가격1 != float64(5750) {
		테스트.Error("F가격정보_생성().G가격() 에러 1")
	}
	가격1 = float64(0.0)

	가격2 := 가격정보.G가격()
	if 가격2 != 가격 ||
		가격2 != 가격정보.가격.G값() ||
		가격2 != float64(5750) {
		테스트.Error("F가격정보_생성().G가격() 에러 2")
	}

	거래량1 := 가격정보.G거래량()
	if 거래량1 != 거래량 ||
		거래량1 != 가격정보.거래량.G값() ||
		거래량1 != uint64(8200) {
		테스트.Error("F가격정보_생성().G거래량() 에러 1")
	}
	거래량1 = uint64(0)

	거래량2 := 가격정보.G거래량()
	if 거래량2 != 거래량 ||
		거래량2 != 가격정보.거래량.G값() ||
		거래량2 != uint64(8200) {
		테스트.Error("F가격정보_생성().G거래량() 에러 2")
	}
}