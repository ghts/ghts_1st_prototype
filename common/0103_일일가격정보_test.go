package common

import (
	"bytes"
	"log"
	"testing"
	"time"
)

func TestF일일가격정보_생성(테스트 *testing.T) {
	식별코드 := uint64(1)
	종목 := F종목_동화약품()
	일자, _ := time.Parse("2006-01-02", "2013-11-01")
	시가 := float64(5590)
	고가 := float64(5660)
	저가 := float64(5550)
	종가 := float64(5590)
	조정종가 := float64(5516.52)
	거래량 := float64(20100)

	일일시세 := F일일가격정보_생성(식별코드,
		종목,
		일자,
		시가,
		고가,
		저가,
		종가,
		조정종가,
		거래량)

	식별코드1 := 일일시세.G식별코드()
	if 식별코드1 != 식별코드 ||
		식별코드1 != 일일시세.식별코드.G값() ||
		식별코드1 != uint64(1) {
		테스트.Error("F일일가격정보_생성().G식별코드() 에러 1")
	}
	식별코드1 = uint64(999)

	식별코드2 := 일일시세.G식별코드()
	if 식별코드2 != 식별코드 ||
		식별코드2 != 일일시세.식별코드.G값() ||
		식별코드2 != uint64(1) {
		테스트.Error("F일일가격정보_생성().G식별코드() 에러 2")
	}

	종목1 := 일일시세.G종목()
	if 종목1.G식별코드() != 종목.G식별코드() ||
		종목1.G식별코드() != 일일시세.종목.G식별코드() ||
		종목1.G종목코드() != 종목.G종목코드() ||
		종목1.G종목코드() != 일일시세.종목.G종목코드() {
		테스트.Error("F일일가격정보_생성().G종목() 에러 1")
	}
	종목1 = F종목_삼성전자()

	종목2 := 일일시세.G종목()
	if 종목2.G식별코드() != 종목.G식별코드() ||
		종목2.G식별코드() != 일일시세.종목.G식별코드() ||
		종목2.G종목코드() != 종목.G종목코드() ||
		종목2.G종목코드() != 일일시세.종목.G종목코드() {
		테스트.Error("F일일가격정보_생성().G종목() 에러 2")
	}

	일자1 := 일일시세.G일자()
	if 일자1 != 일자 ||
		일자1 != 일일시세.일자.G값() {
		테스트.Error("F일일시세_생성().G일자() 에러 1")
	}
	일자1, _ = time.Parse("2006-01-02 15:04:05", "2000-01-01 00:00:00")

	일자2 := 일일시세.G일자()
	if 일자2 != 일자 ||
		일자2 != 일일시세.일자.G값() {
		테스트.Error("F일일시세_생성().G일자() 에러 2")
	}

	시가1 := 일일시세.G시가()
	if 시가1 != 시가 ||
		시가1 != 일일시세.시가.G값() ||
		시가1 != float64(5590) {
		테스트.Error("F일일가격정보_생성().G시가() 에러 1")
	}
	시가1 = float64(0.0)

	시가2 := 일일시세.G시가()
	if 시가2 != 시가 ||
		시가2 != 일일시세.시가.G값() ||
		시가2 != float64(5590) {
		테스트.Error("F일일가격정보_생성().G시가() 에러 2")
	}

	고가1 := 일일시세.G고가()
	if 고가1 != 고가 ||
		고가1 != 일일시세.고가.G값() ||
		고가1 != float64(5660) {
		테스트.Error("F일일가격정보_생성().G고가() 에러 1")
	}
	고가1 = float64(0.0)

	고가2 := 일일시세.G고가()
	if 고가2 != 고가 ||
		고가2 != 일일시세.고가.G값() ||
		고가2 != float64(5660) {
		테스트.Error("F일일가격정보_생성().G고가() 에러 2")
	}

	저가1 := 일일시세.G저가()
	if 저가1 != 저가 ||
		저가1 != 일일시세.저가.G값() ||
		저가1 != float64(5550) {
		테스트.Error("F일일가격정보_생성().G저가() 에러 1")
	}
	저가1 = float64(0.0)

	저가2 := 일일시세.G저가()
	if 저가2 != 저가 ||
		저가2 != 일일시세.저가.G값() ||
		저가2 != float64(5550) {
		테스트.Error("F일일가격정보_생성().G저가() 에러 2")
	}

	종가1 := 일일시세.G종가()
	if 종가1 != 종가 ||
		종가1 != 일일시세.종가.G값() ||
		종가1 != float64(5590) {
		테스트.Error("F일일가격정보_생성().G종가() 에러 1")
	}
	종가1 = float64(0.0)

	종가2 := 일일시세.G종가()
	if 종가2 != 종가 ||
		종가2 != 일일시세.종가.G값() ||
		종가2 != float64(5590) {
		테스트.Error("F일일가격정보_생성().G종가() 에러 2")
	}

	조정계수 := F반올림(일일시세.조정종가.G값()/일일시세.종가.G값(), 4)
	조정계수1 := 일일시세.G조정계수()
	if 조정계수1 != 조정계수 ||
		조정계수1 != 일일시세.조정계수.G값() {
		테스트.Error("F일일가격정보_생성().G조정계수() 에러 2")
	}
	조정계수1 = 0.0

	조정계수2 := 일일시세.G조정계수()
	if 조정계수2 != 조정계수 ||
		조정계수2 != 일일시세.조정계수.G값() {
		테스트.Error("F일일가격정보_생성().G조정계수() 에러 2")
	}

	조정시가 := F반올림_통화(일일시세.시가.G값() * 일일시세.조정종가.G값() / 일일시세.종가.G값())
	조정시가1 := 일일시세.G조정시가()
	if 조정시가1 != 조정시가 ||
		조정시가1 != 일일시세.조정시가.G값() {
		테스트.Error("F일일가격정보_생성().G조정시가() 에러 1")
	}
	조정시가1 = 0.0

	조정시가2 := 일일시세.G조정시가()
	if 조정시가2 != 조정시가 ||
		조정시가2 != 일일시세.조정시가.G값() {
		테스트.Error("F일일가격정보_생성().G조정시가() 에러 2")
	}

	조정고가 := F반올림_통화(일일시세.고가.G값() * 일일시세.조정종가.G값() / 일일시세.종가.G값())
	조정고가1 := 일일시세.G조정고가()
	if 조정고가1 != 조정고가 ||
		조정고가1 != 일일시세.조정고가.G값() {
		테스트.Error("F일일가격정보_생성().G조정고가() 에러 1")
	}
	조정고가1 = 0.0

	조정고가2 := 일일시세.G조정고가()
	if 조정고가2 != 조정고가 ||
		조정고가2 != 일일시세.조정고가.G값() {
		테스트.Error("F일일가격정보_생성().G조정고가() 에러 2")
	}

	조정저가 := F반올림_통화(일일시세.저가.G값() * 일일시세.조정종가.G값() / 일일시세.종가.G값())
	조정저가1 := 일일시세.G조정저가()
	if 조정저가1 != 조정저가 ||
		조정저가1 != 일일시세.조정저가.G값() {
		테스트.Error("F일일가격정보_생성().G조정저가() 에러 1")
	}
	조정저가1 = 0.0

	조정저가2 := 일일시세.G조정저가()
	if 조정저가2 != 조정저가 ||
		조정저가2 != 일일시세.조정저가.G값() {
		테스트.Error("F일일가격정보_생성().G조정저가() 에러 2")
	}

	조정종가1 := 일일시세.G조정종가()
	if 조정종가1 != 조정종가 ||
		조정종가1 != 일일시세.조정종가.G값() {
		테스트.Error("F일일가격정보_생성().G조정종가() 에러 1")
	}
	조정종가1 = 0.0

	조정종가2 := 일일시세.G조정종가()
	if 조정종가2 != 조정종가 ||
		조정종가2 != 일일시세.조정종가.G값() {
		테스트.Error("F일일가격정보_생성().G조정종가() 에러 2")
	}

	거래량1 := 일일시세.G거래량()
	if 거래량1 != 거래량 ||
		거래량1 != 일일시세.거래량.G값() ||
		거래량1 != float64(20100) {
		테스트.Error("F일일가격정보_생성().G거래량() 에러 1")
	}
	거래량1 = float64(20100)

	거래량2 := 일일시세.G거래량()
	if 거래량2 != 거래량 ||
		거래량2 != 일일시세.거래량.G값() ||
		거래량2 != float64(20100) {
		테스트.Error("F일일가격정보_생성().G거래량() 에러 2")
	}

	키 := 일일시세.종목.G종목코드() + "_" + 일일시세.G일자().Format("2006-01-02")
	키1 := 일일시세.G키()
	if 키1 != 키 {
		테스트.Error("F일일가격정보_생성().G키() 에러 1")
	}
	키1 = "변경된 키"

	키2 := 일일시세.G키()
	if 키2 != 키 {
		테스트.Error("F일일가격정보_생성().G키() 에러 2")
	}

	// 날짜 형식 변환 확인
	일일시세 = F일일가격정보_생성(식별코드,
		종목,
		time.Now(),
		시가,
		고가,
		저가,
		종가,
		조정종가,
		거래량)

	if !일일시세.G일자().Equal(F일자(일일시세.G일자())) {
		테스트.Error("C일일가격정보() : '일자(date)'가 적절한 형식으로 변환되지 않았습니다.")
	}
}

func TestC일일가격정보_G같음(테스트 *testing.T) {
	일일시세1 := F일일시세_동화약품_20131101()
	일일시세2 := F일일시세_동화약품_20131101()
	일일시세3 := F일일시세_동화약품_20140312()

	if !일일시세1.G같음(일일시세2) {
		테스트.Error("C일일가격정보().M같음() 에러 1")
	}

	if 일일시세1.G같음(일일시세3) {
		테스트.Error("C일일가격정보().M같음() 에러 2")
	}
}

func TestC일일가격정보_G구조체(테스트 *testing.T) {
	c1 := F일일시세_동화약품_20131101()
	s := c1.G구조체()
	c2 := s.G상수형_구조체()

	if s.G식별코드() != c1.G식별코드() ||
		s.G종목() != c1.G종목() ||
		s.G일자() != c1.G일자() ||
		s.G시가() != c1.G시가() ||
		s.G고가() != c1.G고가() ||
		s.G저가() != c1.G저가() ||
		s.G종가() != c1.G종가() ||
		s.G조정계수() != c1.G조정계수() ||
		s.G조정시가() != c1.G조정시가() ||
		s.G조정고가() != c1.G조정고가() ||
		s.G조정저가() != c1.G조정저가() ||
		s.G조정종가() != c1.G조정종가() ||
		s.G거래량() != c1.G거래량() {
		테스트.Error("C일일가격정보().G구조체() 에러 1")
	}

	if !c1.G같음(c2) {
		테스트.Error("C일일가격정보().G구조체() 에러 2")
	}
}

func TestS일일가격정보(테스트 *testing.T) {
	일일시세 := F일일시세_동화약품_20131101().G구조체()

	if 일일시세.G식별코드() != 일일시세.식별코드 {
		테스트.Error("S일일가격정보().G식별코드() 에러")
	}

	if 일일시세.G종목().G식별코드() != 일일시세.종목.G식별코드() ||
		일일시세.G종목().G종목코드() != 일일시세.종목.G종목코드() {
		테스트.Error("S일일가격정보().G종목() 에러")
	}

	if !일일시세.G일자().Equal(일일시세.일자) {
		테스트.Error("S일일가격정보().G일자() 에러")
	}

	if 일일시세.G시가() != 일일시세.시가 {
		테스트.Error("S일일가격정보().G시가() 에러")
	}

	if 일일시세.G고가() != 일일시세.고가 {
		테스트.Error("S일일가격정보().G고가() 에러")
	}

	if 일일시세.G저가() != 일일시세.저가 {
		테스트.Error("S일일가격정보().G저가() 에러")
	}

	if 일일시세.G종가() != 일일시세.종가 {
		테스트.Error("S일일가격정보().G종가() 에러")
	}

	조정계수 := F반올림(일일시세.조정종가/일일시세.종가, 4)
	if 일일시세.G조정계수() != 일일시세.조정계수 ||
		일일시세.G조정계수() != 조정계수 {
		테스트.Error("S일일가격정보().G조정계수() 에러")
	}

	조정시가 := F반올림_통화(일일시세.시가 * 일일시세.조정종가 / 일일시세.종가)
	if 일일시세.G조정시가() != 일일시세.조정시가 ||
		일일시세.G조정시가() != 조정시가 {
		테스트.Error("S일일가격정보().G조정시가() 에러")
	}

	조정고가 := F반올림_통화(일일시세.고가 * 일일시세.조정종가 / 일일시세.종가)
	if 일일시세.G조정고가() != 일일시세.조정고가 ||
		일일시세.G조정고가() != 조정고가 {
		테스트.Error("S일일가격정보().G조정고가() 에러")
	}

	if 일일시세.G조정저가() != 일일시세.조정저가 {
		테스트.Error("S일일가격정보().G조정저가() 에러")
	}

	if 일일시세.G조정종가() != 일일시세.조정종가 {
		테스트.Error("S일일가격정보().G조정종가() 에러")
	}

	if 일일시세.G거래량() != 일일시세.거래량 {
		테스트.Error("S일일가격정보().G거래량() 에러")
	}

	if 일일시세.G키() != (일일시세.종목.G종목코드() + "_" +
		일일시세.일자.Format("2006-01-02")) {
		테스트.Error("S일일가격정보().G키() 에러")
	}

	일일시세상수 := 일일시세.G상수형_구조체()

	if 일일시세상수.G식별코드() != 일일시세.G식별코드() {
		테스트.Error("S일일가격정보().M상수형구조체생성().G식별코드() 에러")
	}

	if 일일시세상수.G종목().G식별코드() != 일일시세.종목.G식별코드() ||
		일일시세상수.G종목().G종목코드() != 일일시세.종목.G종목코드() {
		테스트.Error("S일일가격정보().M상수형구조체생성().G종목() 에러")
	}

	if !일일시세상수.G일자().Equal(일일시세.일자) {
		테스트.Error("S일일가격정보().M상수형구조체생성().G일자() 에러")
	}

	if 일일시세상수.G시가() != 일일시세.시가 {
		테스트.Error("S일일가격정보().M상수형구조체생성().G시가() 에러")
	}

	if 일일시세상수.G고가() != 일일시세.고가 {
		테스트.Error("S일일가격정보().M상수형구조체생성().G고가() 에러")
	}

	if 일일시세상수.G저가() != 일일시세.저가 {
		테스트.Error("S일일가격정보().M상수형구조체생성().G저가() 에러")
	}

	if 일일시세상수.G종가() != 일일시세.종가 {
		테스트.Error("S일일가격정보().M상수형구조체생성().G종가() 에러")
	}

	if 일일시세상수.G조정종가() != 일일시세.조정종가 {
		테스트.Error("S일일가격정보().M상수형구조체생성().G조정종가() 에러")
	}

	if 일일시세상수.G거래량() != 일일시세.거래량 {
		테스트.Error("S일일가격정보().M상수형구조체생성().G거래량() 에러")
	}

	if 일일시세상수.G조정계수() != 일일시세.조정계수 {
		테스트.Error("S일일가격정보().M상수형구조체생성().G조정계수() 에러")
	}

	if 일일시세상수.G조정시가() != 일일시세.조정시가 {
		테스트.Error("S일일가격정보().M상수형구조체생성().G조정시가() 에러")
	}

	if 일일시세상수.G조정고가() != 일일시세.조정고가 {
		테스트.Error("S일일가격정보().M상수형구조체생성().G조정고가() 에러")
	}

	if 일일시세상수.G조정저가() != 일일시세.조정저가 {
		테스트.Error("S일일가격정보().M상수형구조체생성().G조정저가() 에러")
	}

	if 일일시세상수.G키() != 일일시세.G키() {
		테스트.Error("S일일가격정보().M상수형구조체생성().G키() 에러")
	}

	일일시세.S일자(time.Now()) // 날짜 형식 변환
	if !일일시세.G일자().Equal(F일자(일일시세.G일자())) {
		테스트.Error("S일일가격정보() : '일자(date)'가 적절한 형식으로 변환되지 않았습니다.")
	}
}

func TestS종목별_일일가격정보_모음(테스트 *testing.T) {
	F테스트_모드_시작()
	defer F테스트_모드_종료()

	s := new(S종목별_일일가격정보_모음)

	종목 := F종목_동화약품()
	s.S종목(종목)
	if s.G종목().G종목코드() != 종목.G종목코드() {
		테스트.Error("TestS종목별_일일가격정보_모음() : 종목코드가 일치하지 않습니다.")
	}

	내용 := make([]*C일일가격정보, 0)
	내용 = append(내용, F일일시세_동화약품_20131101())
	내용 = append(내용, F일일시세_삼성전자_20140425())

	s.S추가(내용)
	if len(s.G슬라이스()) != 1 {
		테스트.Errorf("TestS종목별_일일가격정보_모음() : 수량 불일치. 예상값 1, 실제값 %v.", len(s.G슬라이스()))
	}

	// 같은 내용 중복 추가 시 덮어쓰기 테스트
	s.S추가(내용)
	if len(s.G슬라이스()) != 1 {
		테스트.Errorf("TestS종목별_일일가격정보_모음() : 수량 불일치 2. 예상값 1, 실제값 %v.", len(s.G슬라이스()))
	}

	s.S단일내용_추가(F일일시세_동화약품_20140313())
	if len(s.G슬라이스()) != 2 {
		테스트.Errorf("TestS종목별_일일가격정보_모음() : 수량 불일치. 예상값 2, 실제값 %v.", len(s.G슬라이스()))
	}

	s.초기화()
	if len(s.G슬라이스()) != 0 {
		테스트.Errorf("TestS종목별_일일가격정보_모음() : 초기화 후 수량이 0이 아님. 실제값 %v.", len(s.G슬라이스()))
	}

	내용 = make([]*C일일가격정보, 0)
	내용 = append(내용, F일일시세_동화약품_20140313())
	내용 = append(내용, F일일시세_동화약품_20140312())
	내용 = append(내용, F일일시세_삼성전자_20140708())
	내용 = append(내용, F일일시세_삼성전자_20140709())

	s.S추가(내용)

	if len(s.G슬라이스()) != 2 {
		테스트.Errorf("TestS종목별_일일가격정보_모음() : 수량 불일치. 예상값 2, 실제값 %v", len(s.G슬라이스()))
	}

	내용_정렬 := s.G슬라이스()
	if 내용_정렬[0].G일자().After(내용_정렬[1].G일자()) {
		테스트.Error("TestS종목별_일일가격정보_모음() : 정렬이 되지 않았습니다.")
	}

	맵 := s.G맵()

	if len(맵) != 2 {
		테스트.Errorf("TestS종목별_일일가격정보_모음() : 맵의 원소 수량 불일치. 예상값 2, 실제값 %v.", len(맵))
	}

	일자, _ := time.Parse("2006-01-02", "2014-03-13")
	일일가격정보 := s.G일일가격정보(일자)
	일일가격정보_원본 := F일일시세_동화약품_20140313()

	if 일일가격정보 == nil {
		테스트.Error("TestS종목별_일일가격정보_모음() : G일일가격정보()가 nil입니다.")
	}

	if 일일가격정보_원본.G종목().G종목코드() != 일일가격정보.G종목().G종목코드() {
		테스트.Error("TestS종목별_일일가격정보_모음() : G일일가격정보() 반환값이 원본과 다릅니다. 종목코드.")
	}

	if !일일가격정보_원본.G일자().Equal(일일가격정보.G일자()) {
		테스트.Error("TestS종목별_일일가격정보_모음() : G일일가격정보() 반환값이 원본과 다릅니다. 일자.")
	}

	if 일일가격정보_원본.G시가() != 일일가격정보.G시가() {
		테스트.Error("TestS종목별_일일가격정보_모음() : G일일가격정보() 반환값이 원본과 다릅니다. 시가.")
	}

	if 일일가격정보_원본.G고가() != 일일가격정보.G고가() {
		테스트.Error("TestS종목별_일일가격정보_모음() : G일일가격정보() 반환값이 원본과 다릅니다. 고가.")
	}

	if 일일가격정보_원본.G저가() != 일일가격정보.G저가() {
		테스트.Error("TestS종목별_일일가격정보_모음() : G일일가격정보() 반환값이 원본과 다릅니다. 저가.")
	}

	if 일일가격정보_원본.G종가() != 일일가격정보.G종가() {
		테스트.Error("TestS종목별_일일가격정보_모음() : G일일가격정보() 반환값이 원본과 다릅니다. 종가.")
	}

	if 일일가격정보_원본.G조정계수() != 일일가격정보.G조정계수() {
		테스트.Error("TestS종목별_일일가격정보_모음() : G일일가격정보() 반환값이 원본과 다릅니다. 조정계수.")
	}

	if 일일가격정보_원본.G조정시가() != 일일가격정보.G조정시가() {
		테스트.Error("TestS종목별_일일가격정보_모음() : G일일가격정보() 반환값이 원본과 다릅니다. 조정시가.")
	}

	if 일일가격정보_원본.G조정고가() != 일일가격정보.G조정고가() {
		테스트.Error("TestS종목별_일일가격정보_모음() : G일일가격정보() 반환값이 원본과 다릅니다. 조정고가.")
	}

	if 일일가격정보_원본.G조정저가() != 일일가격정보.G조정저가() {
		테스트.Error("TestS종목별_일일가격정보_모음() : G일일가격정보() 반환값이 원본과 다릅니다. 조정저가.")
	}

	if 일일가격정보_원본.G조정종가() != 일일가격정보.G조정종가() {
		테스트.Error("TestS종목별_일일가격정보_모음() : G일일가격정보() 반환값이 원본과 다릅니다. 조정종가.")
	}

	if 일일가격정보_원본.G거래량() != 일일가격정보.G거래량() {
		테스트.Error("TestS종목별_일일가격정보_모음() : G일일가격정보() 반환값이 원본과 다릅니다. 거래량.")
	}
}

func TestS일일가격정보_모음_맵(테스트 *testing.T) {
	F테스트_모드_시작()
	defer F테스트_모드_종료()
	F종목정보_테이블_생성()
	defer F테이블_삭제(F종목정보_테이블())
	F종목정보_맵_DB기록(F종목정보_맵_테스트용())

	일일가격정보_모음_맵 := new(S일일가격정보_모음_맵)

	내용 := make([]*C일일가격정보, 0)
	내용 = append(내용, F일일시세_동화약품_20131101())
	내용 = append(내용, F일일시세_동화약품_20140313())
	일일가격정보_모음_맵.S추가(내용)

	if 일일가격정보_모음_맵 == nil {
		테스트.Error("TestS일일가격정보_모음_맵() : 맵이 nil입니다.")
	}

	종목1 := F종목_동화약품()
	종목별_내용 := 일일가격정보_모음_맵.G종목별_내용(종목1)

	if 종목별_내용 == nil {
		테스트.Error("TestS일일가격정보_모음_맵() : G종목별_내용() 이 nil입니다.", 종목1.G종목코드())
	}

	if len(종목별_내용.G슬라이스()) != 2 {
		테스트.Errorf("TestS일일가격정보_모음_맵() : G종목별_내용() 수량 불일치. "+
			"종목코드 %v, 예상값 2, 실제값 %v",
			종목1.G종목코드(), len(종목별_내용.G슬라이스()))
	}

	일일가격정보_모음_맵.S단일내용_추가(F일일시세_동화약품_20140312())
	종목별_내용 = 일일가격정보_모음_맵.G종목별_내용(종목1)

	if len(종목별_내용.G슬라이스()) != 3 {
		테스트.Errorf("TestS일일가격정보_모음_맵() : G종목별_내용() 수량 불일치. "+
			"종목코드 %v, 예상값 3, 실제값 %v",
			종목1.G종목코드(), len(종목별_내용.G슬라이스()))
	}

	내용 = make([]*C일일가격정보, 0)
	내용 = append(내용, F일일시세_삼성전자_20140425())
	내용 = append(내용, F일일시세_삼성전자_20140708())
	내용 = append(내용, F일일시세_삼성전자_20140709())
	일일가격정보_모음_맵.S추가(내용)

	종목2 := F종목_삼성전자()
	종목별_내용 = 일일가격정보_모음_맵.G종목별_내용(종목2)

	if 종목별_내용 == nil {
		테스트.Error("TestS일일가격정보_모음_맵() : G종목별_내용() 이 nil입니다.", 종목2.G종목코드())
	}

	if len(종목별_내용.G슬라이스()) != 3 {
		테스트.Errorf("TestS일일가격정보_모음_맵() : G종목별_내용() 수량 불일치. "+
			"종목코드 %v, 예상값 3, 실제값 %v",
			종목2.G종목코드(), len(종목별_내용.G슬라이스()))
	}

	전체_내용 := 일일가격정보_모음_맵.G슬라이스()
	if len(전체_내용) != 6 {
		테스트.Errorf("TestS일일가격정보_모음_맵() : G전체_내용() 수량 불일치. "+
			"종목코드 %v, 예상값 6, 실제값 %v",
			종목1.G종목코드(), len(전체_내용))
	}

	일일가격정보_모음_맵.초기화()

	종목별_내용 = 일일가격정보_모음_맵.G종목별_내용(종목1)
	if len(종목별_내용.G슬라이스()) != 0 {
		테스트.Errorf("TestS일일가격정보_모음_맵() : G종목별_내용() 수량 불일치. "+
			"종목코드 %v, 예상값 0, 실제값 %v",
			종목1.G종목코드(), len(종목별_내용.G슬라이스()))
	}

	종목별_내용 = 일일가격정보_모음_맵.G종목별_내용(종목2)
	if len(종목별_내용.G슬라이스()) != 0 {
		테스트.Errorf("TestS일일가격정보_모음_맵() : G종목별_내용() 수량 불일치. "+
			"종목코드 : %v, 예상값 0, 실제값 %v",
			종목2.G종목코드(), len(종목별_내용.G슬라이스()))
	}

	전체_내용 = 일일가격정보_모음_맵.G슬라이스()
	if len(전체_내용) != 0 {
		테스트.Errorf("TestS일일가격정보_모음_맵() : G전체_내용() 수량 불일치. "+
			"종목코드 %v, 예상값 0, 실제값 %v",
			종목1.G종목코드(), len(전체_내용))
	}
}

func TestF종목별_일일가격정보_모음(테스트 *testing.T) {
	F테스트_모드_시작()
	defer F테스트_모드_종료()
	F종목정보_테이블_생성()
	defer F테이블_삭제(F종목정보_테이블())
	F일일가격정보_테이블_생성()
	defer F테이블_삭제(F일일가격정보_테이블())

	에러 := F종목정보_맵_DB기록(F종목정보_맵_테스트용())
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_모음() : F종목정보_맵_DB기록() 에러", 에러)
	}

	종목_동화약품 := F종목_검색(F종목_동화약품().G종목코드())

	sql := new(bytes.Buffer)
	sql.WriteString("INSERT INTO ")
	sql.WriteString(F일일가격정보_테이블() + " (")
	sql.WriteString("stock_info_id,")
	sql.WriteString("priced_on,")
	sql.WriteString("open,")
	sql.WriteString("high,")
	sql.WriteString("low,")
	sql.WriteString("close,")
	sql.WriteString("adj_coeff,")
	sql.WriteString("adj_open,")
	sql.WriteString("adj_high,")
	sql.WriteString("adj_low,")
	sql.WriteString("adj_close,")
	sql.WriteString("volumn")
	sql.WriteString(") VALUES (")
	sql.WriteString("?,?,?,?,?,?,?,?,?,?,?,?")
	sql.WriteString(")")

	c := F일일시세_동화약품_20131101()

	_, 에러 = F_SQL실행(sql.String(),
		종목_동화약품.G식별코드(),
		c.G일자(),
		c.G시가(),
		c.G고가(),
		c.G저가(),
		c.G종가(),
		c.G조정계수(),
		c.G조정시가(),
		c.G조정고가(),
		c.G조정저가(),
		c.G조정고가(),
		c.G거래량())

	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_모음() 일일시세 INSERT 에러", 에러, sql.String())
	}

	종목별_일일가격정보_모음, 에러 := F종목별_일일가격정보_모음(종목_동화약품)

	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_모음() : F종목별_일일가격정보_모음()에서 에러가 발생하였습니다.", 에러)
	}

	if 종목별_일일가격정보_모음 == nil {
		테스트.Error("TestF종목별_일일가격정보_모음() : '종목별_일일가격정보_모음'이 nil입니다.")
	}

	if 종목별_일일가격정보_모음.G슬라이스() == nil {
		테스트.Error("TestF종목별_일일가격정보_모음() : '종목별_일일가격정보_모음.G슬라이스()'이 nil입니다.")
	}

	if len(종목별_일일가격정보_모음.G슬라이스()) != 1 {
		테스트.Error("TestF종목별_일일가격정보_모음() : '종목별_일일가격정보_모음' 수량이 예상과 다릅니다. 예상값 1. 실제값 :", len(종목별_일일가격정보_모음.G슬라이스()))
	}

	// 테스트할 때 종목 식별코드가 제대로 입력되지 않아서 에러가 발생한 경우가 있었음.
	// DB검색 전 종목정보의 식별코드를 재설정 하는 지 확인.
	올바른_식별코드 := 종목_동화약품.G식별코드()

	var 틀린_식별코드 uint64 = 0

	종목정보_맵, 에러 := F종목정보_맵()
	if 에러 != nil {
		테스트.Error("common.TestS종목별_일일가격정보_모음() : F종목정보_맵() 에러.", 에러)
	}

	for _, 종목정보 := range 종목정보_맵 {
		if 종목정보.G식별코드() != 올바른_식별코드 {
			틀린_식별코드 = 종목정보.G식별코드()
			break
		}
	}

	식별코드가_잘못된_종목 := F종목_생성(틀린_식별코드,
		종목_동화약품.G종목코드(),
		종목_동화약품.G종목코드2(),
		종목_동화약품.G종목명칭(),
		종목_동화약품.G종목명칭2(),
		종목_동화약품.G발행기관코드(),
		종목_동화약품.G시장구분())

	종목별_일일가격정보_모음, 에러 = F종목별_일일가격정보_모음(식별코드가_잘못된_종목)

	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_모음() : 잘못된 식별코드 테스트 중 F종목별_일일가격정보_모음()에서 에러가 발생하였습니다. ", 에러)
	}

	if 종목별_일일가격정보_모음 == nil {
		테스트.Error("TestF종목별_일일가격정보_모음() : 잘못된 식별코드 테스트 중 '종목별_일일가격정보_모음'이 nil입니다.")
	}

	if 종목별_일일가격정보_모음.G슬라이스() == nil {
		테스트.Error("TestF종목별_일일가격정보_모음() : 잘못된 식별코드 테스트 중 '종목별_일일가격정보_모음.G슬라이스()'이 nil입니다.")
	}

	if len(종목별_일일가격정보_모음.G슬라이스()) != 1 {
		테스트.Error("TestF종목별_일일가격정보_모음() : 잘못된 식별코드 테스트 중 '종목별_일일가격정보_모음' 수량이 예상과 다릅니다. 예상값 1. 실제값 :", len(종목별_일일가격정보_모음.G슬라이스()))
	}
}

func TestF일일가격정보_모음_DB기록(테스트 *testing.T) {
	// 테스트용 DB 테이블 준비
	F테스트_모드_시작()
	defer F테스트_모드_종료()
	F종목정보_테이블_생성()
	defer F테이블_삭제(F종목정보_테이블())
	F일일가격정보_테이블_생성()
	defer F테이블_삭제(F일일가격정보_테이블())

	에러 := F종목정보_맵_DB기록(F종목정보_맵_테스트용())
	if 에러 != nil {
		테스트.Error("TestF일일가격정보_모음_DB기록() : F종목정보_맵_DB기록() 에러 발생.", 에러)
	}

	F종목정보_맵_초기화()
	종목_동화약품 := F종목_검색(F종목_동화약품().G종목코드())
	종목_삼성전자 := F종목_검색(F종목_삼성전자().G종목코드())

	if 종목_동화약품 == nil || 종목_삼성전자 == nil {
		log.Println("종목_동화약품 :", 종목_동화약품)
		log.Println("종목_삼성전자 :", 종목_삼성전자)
		테스트.Error("TestF일일가격정보_모음_DB기록() : 종목 초기설정 nil 에러.")
	}

	if 종목_동화약품.G종목코드() == "" || 종목_삼성전자.G종목코드() == "" {
		log.Println("종목_동화약품.G종목코드() :", 종목_동화약품.G종목코드())
		log.Println("종목_삼성전자.G종목코드() :", 종목_삼성전자.G종목코드())
		테스트.Error("TestF일일가격정보_모음_DB기록() : 종목 초기설정 빈 종목코드 에러.")

	}

	일일가격정보_모음_맵_원본 := F일일가격정보_모음_맵_테스트용()

	// INSERT 테스트
	for _, 일일가격정보_모음_원본 := range 일일가격정보_모음_맵_원본.G맵() {
		에러 = F일일가격정보_모음_DB기록(일일가격정보_모음_원본)
		if 에러 != nil {
			테스트.Error("TestF일일가격정보_모음_DB기록() : "+
				"F일일가격정보_모음_DB기록() 에러 발생. "+
				"종목코드 : "+일일가격정보_모음_원본.G종목().G종목코드(),
				에러)
		}
	}

	레코드_수량, 에러 := F_SQL질의_정수("SELECT COUNT(*) FROM " + F일일가격정보_테이블())
	if 에러 != nil {
		테스트.Error("TestF일일가격정보_모음_DB기록() : F_SQL질의_정수() 에러.", 에러)
	}
	if 레코드_수량 != 6 {
		log.Println("TestF일일가격정보_모음_DB기록() : 레코드 수량이 예상과 다릅니다. 예상값 6. 실제값 :", 레코드_수량)
		테스트.Error("TestF일일가격정보_모음_DB기록() : 레코드 수량이 예상과 다릅니다. 예상값 6. 실제값 :", 레코드_수량)
	}

	일일가격정보_모음_1, 에러 := F종목별_일일가격정보_모음(종목_동화약품)
	if 에러 != nil {
		log.Println("종목코드 :", 종목_동화약품.G종목코드())
		테스트.Error("TestF일일가격정보_모음_DB기록() : F종목별_일일가격정보_모음() 에러 발생 1. ", 에러)
	}

	일일가격정보_모음_2, 에러 := F종목별_일일가격정보_모음(종목_삼성전자)
	if 에러 != nil {
		log.Println("종목코드 :", 종목_삼성전자.G종목코드())
		테스트.Error("TestF일일가격정보_모음_DB기록() : F종목별_일일가격정보_모음() 에러 발생 2. ", 에러)
	}

	if 일일가격정보_모음_1 == nil || 일일가격정보_모음_2 == nil {
		log.Println("1 :", 일일가격정보_모음_1, "2 :", 일일가격정보_모음_2)
		테스트.Error("TestF일일가격정보_모음_DB기록() : 일일가격정보_모음 결과가 nil입니다.")
	}

	if 일일가격정보_모음_1.G슬라이스() == nil || 일일가격정보_모음_2.G슬라이스() == nil {
		log.Println("1 :", 일일가격정보_모음_1, "2 :", 일일가격정보_모음_2)
		테스트.Error("TestF일일가격정보_모음_DB기록() : 일일가격정보_모음 결과가 nil입니다.")
	}

	if len(일일가격정보_모음_1.G슬라이스()) != 3 || len(일일가격정보_모음_2.G슬라이스()) != 3 {
		log.Println("TestF일일가격정보_모음_DB기록() : 일일가격정보_모음 수량이 예상과 다릅니다.")
		log.Println("종목코드 :", 종목_동화약품.G종목코드(), ", 예상값 3. 실제값 :", len(일일가격정보_모음_1.G슬라이스()))
		log.Println("종목코드 :", 종목_삼성전자.G종목코드(), ", 예상값 3. 실제값 :", len(일일가격정보_모음_2.G슬라이스()))
		테스트.Error("TestF일일가격정보_모음_DB기록() : 일일가격정보_모음 수량이 예상과 다릅니다.")
	}

	일일가격정보_모음_결과 := append(일일가격정보_모음_1.G슬라이스(),
		일일가격정보_모음_2.G슬라이스()...)

	for _, 일일가격정보_원본 := range 일일가격정보_모음_맵_원본.G슬라이스() {
		찾음 := false

		for _, 일일가격정보 := range 일일가격정보_모음_결과 {
			if 일일가격정보_원본.G일자().Equal(일일가격정보.G일자()) &&
				일일가격정보_원본.G종목().G종목코드() == 일일가격정보.G종목().G종목코드() &&
				일일가격정보_원본.G시가() == 일일가격정보.G시가() &&
				일일가격정보_원본.G고가() == 일일가격정보.G고가() &&
				일일가격정보_원본.G저가() == 일일가격정보.G저가() &&
				일일가격정보_원본.G종가() == 일일가격정보.G종가() &&
				일일가격정보_원본.G조정종가() == 일일가격정보.G조정종가() &&
				일일가격정보_원본.G거래량() == 일일가격정보.G거래량() &&
				일일가격정보_원본.G조정계수() == 일일가격정보.G조정계수() &&
				일일가격정보_원본.G조정시가() == 일일가격정보.G조정시가() &&
				일일가격정보_원본.G조정고가() == 일일가격정보.G조정고가() &&
				일일가격정보_원본.G조정저가() == 일일가격정보.G조정저가() {
				찾음 = true
				break
			}
		}

		if !찾음 {
			log.Println("TestF일일가격정보_모음_DB기록() INSERT : 일일가격정보가 존재하지 않습니다.")
			log.Println("종목코드 :", 일일가격정보_원본.G종목().G종목코드())
			log.Println("일자 :", 일일가격정보_원본.G일자())
			log.Println("시가 :", 일일가격정보_원본.G시가())
			log.Println("고가 :", 일일가격정보_원본.G고가())
			log.Println("저가 :", 일일가격정보_원본.G저가())
			log.Println("종가 :", 일일가격정보_원본.G종가())
			log.Println("조정종가 :", 일일가격정보_원본.G조정종가())
			log.Println("거래량 :", 일일가격정보_원본.G거래량())
			log.Println("조정계수 :", 일일가격정보_원본.G조정계수())
			log.Println("조정시가 :", 일일가격정보_원본.G조정시가())
			log.Println("조정고가 :", 일일가격정보_원본.G조정고가())
			log.Println("조정저가 :", 일일가격정보_원본.G조정저가())

			테스트.Error("TestF일일가격정보_모음_DB기록() : 원본과 일치하는 일일가격정보가 존재하지 않습니다.")
		}
	}

	// UPDATE 테스트
	// 우선 테스트 데이터의 조정종가를 10% 낮춤.
	UPDATE_테스트_데이터 := make([]*C일일가격정보, 0)
	for _, 일일가격정보 := range 일일가격정보_모음_맵_원본.G슬라이스() {
		일일가격정보_구조체 := 일일가격정보.G구조체()
		일일가격정보_구조체.S조정종가(일일가격정보.G조정종가() * 0.9)
		일일가격정보_구조체.M조정가격_재계산()

		일일가격정보_갱신 := 일일가격정보_구조체.G상수형_구조체()
		UPDATE_테스트_데이터 = append(UPDATE_테스트_데이터, 일일가격정보_갱신)
	}

	일일가격정보_모음_맵_원본 = new(S일일가격정보_모음_맵)
	일일가격정보_모음_맵_원본.S추가(UPDATE_테스트_데이터)

	for _, 일일가격정보_모음_원본 := range 일일가격정보_모음_맵_원본.G맵() {
		에러 = F일일가격정보_모음_DB기록(일일가격정보_모음_원본)
		if 에러 != nil {
			테스트.Error("TestF일일가격정보_모음_DB기록() UPDATE : "+
				"F일일가격정보_모음_DB기록() 에러 발생. "+
				"종목코드 : "+일일가격정보_모음_원본.G종목().G종목코드(),
				에러)
		}
	}

	레코드_수량, 에러 = F_SQL질의_정수("SELECT COUNT(*) FROM " + F일일가격정보_테이블())
	if 에러 != nil {
		테스트.Error("TestF일일가격정보_모음_DB기록() UPDATE : F_SQL질의_정수() 에러.", 에러)
	}
	if 레코드_수량 != 6 {
		log.Println("TestF일일가격정보_모음_DB기록() UPDATE : 레코드 수량이 예상과 다릅니다. 예상값 6. 실제값 :", 레코드_수량)
		테스트.Error("TestF일일가격정보_모음_DB기록() UPDATE : 레코드 수량이 예상과 다릅니다. 예상값 6. 실제값 :", 레코드_수량)
	}

	일일가격정보_모음_1, 에러 = F종목별_일일가격정보_모음(종목_동화약품)
	if 에러 != nil {
		log.Println("종목코드 :", 종목_동화약품.G종목코드())
		테스트.Error("TestF일일가격정보_모음_DB기록() UPDATE : F종목별_일일가격정보_모음() 에러 발생 1. ", 에러)
	}

	일일가격정보_모음_2, 에러 = F종목별_일일가격정보_모음(종목_삼성전자)
	if 에러 != nil {
		log.Println("종목코드 :", 종목_삼성전자.G종목코드())
		테스트.Error("TestF일일가격정보_모음_DB기록() UPDATE : F종목별_일일가격정보_모음() 에러 발생 2. ", 에러)
	}

	if 일일가격정보_모음_1 == nil || 일일가격정보_모음_2 == nil {
		log.Println("1 :", 일일가격정보_모음_1, "2 :", 일일가격정보_모음_2)
		테스트.Error("TestF일일가격정보_모음_DB기록() UPDATE : 일일가격정보_모음 결과가 nil입니다.")
	}

	if 일일가격정보_모음_1.G슬라이스() == nil || 일일가격정보_모음_2.G슬라이스() == nil {
		log.Println("1 :", 일일가격정보_모음_1, "2 :", 일일가격정보_모음_2)
		테스트.Error("TestF일일가격정보_모음_DB기록() UPDATE : 일일가격정보_모음 결과가 nil입니다.")
	}

	if len(일일가격정보_모음_1.G슬라이스()) != 3 || len(일일가격정보_모음_2.G슬라이스()) != 3 {
		log.Println("TestF일일가격정보_모음_DB기록() UPDATE : 일일가격정보_모음 수량이 예상과 다릅니다.")
		log.Println("종목코드 :", 종목_동화약품.G종목코드(), ", 예상값 3. 실제값 :", len(일일가격정보_모음_1.G슬라이스()))
		log.Println("종목코드 :", 종목_삼성전자.G종목코드(), ", 예상값 3. 실제값 :", len(일일가격정보_모음_2.G슬라이스()))
		테스트.Error("TestF일일가격정보_모음_DB기록() UPDATE : 일일가격정보_모음 수량이 예상과 다릅니다.")
	}

	일일가격정보_모음_결과 = append(일일가격정보_모음_1.G슬라이스(),
		일일가격정보_모음_2.G슬라이스()...)

	for _, 일일가격정보_원본 := range 일일가격정보_모음_맵_원본.G슬라이스() {
		찾음 := false

		for _, 일일가격정보 := range 일일가격정보_모음_결과 {
			if 일일가격정보_원본.G일자().Equal(일일가격정보.G일자()) &&
				일일가격정보_원본.G종목().G종목코드() == 일일가격정보.G종목().G종목코드() &&
				일일가격정보_원본.G시가() == 일일가격정보.G시가() &&
				일일가격정보_원본.G고가() == 일일가격정보.G고가() &&
				일일가격정보_원본.G저가() == 일일가격정보.G저가() &&
				일일가격정보_원본.G종가() == 일일가격정보.G종가() &&
				일일가격정보_원본.G조정종가() == 일일가격정보.G조정종가() &&
				일일가격정보_원본.G거래량() == 일일가격정보.G거래량() &&
				일일가격정보_원본.G조정계수() == 일일가격정보.G조정계수() &&
				일일가격정보_원본.G조정시가() == 일일가격정보.G조정시가() &&
				일일가격정보_원본.G조정고가() == 일일가격정보.G조정고가() &&
				일일가격정보_원본.G조정저가() == 일일가격정보.G조정저가() {
				찾음 = true
				break
			}
		}

		if !찾음 {
			log.Println("TestF일일가격정보_모음_DB기록() UPDATE : 일일가격정보가 존재하지 않습니다.")
			log.Println("종목코드 :", 일일가격정보_원본.G종목().G종목코드())
			log.Println("일자 :", 일일가격정보_원본.G일자())
			log.Println("시가 :", 일일가격정보_원본.G시가())
			log.Println("고가 :", 일일가격정보_원본.G고가())
			log.Println("저가 :", 일일가격정보_원본.G저가())
			log.Println("종가 :", 일일가격정보_원본.G종가())
			log.Println("조정종가 :", 일일가격정보_원본.G조정종가())
			log.Println("거래량 :", 일일가격정보_원본.G거래량())
			log.Println("조정계수 :", 일일가격정보_원본.G조정계수())
			log.Println("조정시가 :", 일일가격정보_원본.G조정시가())
			log.Println("조정고가 :", 일일가격정보_원본.G조정고가())
			log.Println("조정저가 :", 일일가격정보_원본.G조정저가())

			테스트.Error("TestF일일가격정보_모음_DB기록() UPDATE : 원본과 일치하는 일일가격정보가 존재하지 않습니다.")
		}
	}
}
