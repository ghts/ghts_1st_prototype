	package common

import (
	"reflect"
	"testing"
	"time"
	//"log"
)

func TestS고정소숫점(테스트 *testing.T) {
	초기값 := float64(1000000.2003)
	소숫점_이하_자릿수 := 2
	고정소숫점_구조체 := F고정소숫점_구조체_생성(초기값, 소숫점_이하_자릿수)
	
	if 고정소숫점_구조체.String() != "1000000.20" {
		테스트.Errorf("common.TestS고정소숫점() : 생성값 오류. 예상값 %v, 실제값 %v", "1000000.20", 고정소숫점_구조체.String())
	}
	
	소숫점_이하_자릿수1 := 고정소숫점_구조체.G소숫점_이하_자릿수()
	고정소숫점1 := 고정소숫점_구조체.G값()
	실수1 := 고정소숫점_구조체.G실수값()
	
	if 소숫점_이하_자릿수1 != 2 ||
		고정소숫점1.FloatString(5) != "1000000.20000" ||
		실수1 != 1000000.20  {
		테스트.Errorf("common.TestS고정소숫점() : 처음 읽어온 값 불일치. " +
						"소숫점_이하_자릿수 %v, 고정소숫점값 %v, 실수값 %v.",
						소숫점_이하_자릿수1, 고정소숫점1.FloatString(5), 실수1)
	}
	
	// 값 변경. 이후에도 상수값이 변하지 않는 지 확인
	소숫점_이하_자릿수1 = 소숫점_이하_자릿수1 + 100
	고정소숫점1.Set(big.NewRat(101, 1))
	실수1 = 실수1 + 100.0
	
	소숫점_이하_자릿수2 := 고정소숫점_구조체.G소숫점_이하_자릿수()
	고정소숫점2 := 고정소숫점_구조체.G값()
	실수2 := 고정소숫점_구조체.G실수값()
	
	if 소숫점_이하_자릿수2 != 2 ||
		고정소숫점2.FloatString(5) != "1000000.20000" ||
		실수2 != 1000000.20  {
		테스트.Errorf("common.TestS고정소숫점() : 값 변경 후 불일치. " +
							"소숫점_이하_자릿수 %v, 고정소숫점값 %v, 실수값 %v.",
						소숫점_이하_자릿수2, 고정소숫점2.FloatString(5), 실수2)
	}
	
	// 소숫점 이하 자리가 재설정 되는 지 확인
	고정소숫점_구조체.S소숫점_이하_자릿수(0)
	
	if 고정소숫점_구조체.G소숫점_이하_자릿수() != 0 ||
		고정소숫점_구조체.G값().FloatString(5) != "1000000.00000" ||
		고정소숫점_구조체.G실수값() != 1000000.0 {
		테스트.Errorf("common.TestS고정소숫점() : S소숫점_이하_자릿수() 후 불일치. " +
							"소숫점_이하_자릿수 %v, 고정소숫점값 %v, 실수값 %v.",
							고정소숫점_구조체.G소숫점_이하_자릿수(), 
							고정소숫점_구조체.G값().FloatString(5), 
							고정소숫점_구조체.G실수값())
	}
	
	// S값() 테스트
	고정소숫점_구조체.S소숫점_이하_자릿수(2)
	고정소숫점_구조체.S값(big.NewRat(10001, 100))
	if 고정소숫점_구조체.G소숫점_이하_자릿수() != 2 ||
		고정소숫점_구조체.G값().FloatString(5) != "100.01000" ||
		고정소숫점_구조체.G실수값() != 100.01 {
		테스트.Errorf("common.TestS고정소숫점() : S값() 결과 불일치. " +
							"소숫점_이하_자릿수 %v, 고정소숫점값 %v, 실수값 %v.",
							고정소숫점_구조체.G소숫점_이하_자릿수(), 
							고정소숫점_구조체.G값().FloatString(5), 
							고정소숫점_구조체.G실수값())
	}
	
	// S실수값() 테스트
	고정소숫점_구조체.S소숫점_이하_자릿수(2)
	고정소숫점_구조체.S실수값(100.01499)
	if 고정소숫점_구조체.G소숫점_이하_자릿수() != 2 ||
		고정소숫점_구조체.G값().FloatString(5) != "100.01000" ||
		고정소숫점_구조체.G실수값() != 100.01 {
		테스트.Errorf("common.TestS고정소숫점() : S실수값() 결과 불일치. " +
							"소숫점_이하_자릿수 %v, 고정소숫점값 %v, 실수값 %v.",
							고정소숫점_구조체.G소숫점_이하_자릿수(), 
							고정소숫점_구조체.G값().FloatString(5), 
							고정소숫점_구조체.G실수값())
	}
}

func TestS시점별실수값(테스트 *testing.T) {
	일자, _ := time.Parse("2006-01-02", "2013-11-01")

	s := F시점별실수값생성(일자, 0.1)

	if !s.G시점().Equal(일자) {
		테스트.Error("S시점별실수값.G시점() 에러.")
	}

	if s.G값() != 0.1 {
		테스트.Error("S시점별실수값.G값() 에러.")
	}

	s.S시점(일자.AddDate(0, 0, 1))
	if !s.G시점().Equal(일자.AddDate(0, 0, 1)) {
		테스트.Error("S시점별실수값.S시점() 에러.")
	}

	s.S값(0.2)
	if s.G값() != 0.2 {
		테스트.Error("S시점별실수값.S값() 에러.")
	}
}

func TestF에러내역_생성(테스트 *testing.T) {
	에러코드 := "테스트용 에러코드"
	에러설명 := "테스트용 에러설명 : 모의 에러 발생."

	에러내역 := F에러내역_생성(에러코드, 에러설명)

	에러코드1 := 에러내역.G에러코드()
	if 에러코드1 != 에러코드 {
		테스트.Error("F에러내역_생성.G에러코드() 에러 1")
	}

	에러코드1 = "테스트용 에러코드2"
	에러코드2 := 에러내역.G에러코드()
	if 에러코드2 != 에러코드 {
		테스트.Error("F에러내역_생성.G에러코드() 에러 2")
	}

	에러설명1 := 에러내역.G에러설명()
	if 에러설명1 != 에러설명 {
		테스트.Error("F에러내역_생성.G에러설명() 에러 1")
	}

	에러설명1 = "테스트용 에러설명2"
	에러설명2 := 에러내역.G에러설명()
	if 에러설명2 != 에러설명 {
		테스트.Error("F에러내역_생성.G에러설명() 에러 2")
	}

	if 에러내역.G발생횟수() != 1 {
		테스트.Errorf("F에러내역_생성.G발생횟수() : 값 불일치. 예상값 1, 실제값 %v.", 에러내역.G발생횟수())
	}

	에러내역.S발생횟수_증가()
	if 에러내역.G발생횟수() != 2 {
		테스트.Errorf("F에러내역_생성.G발생횟수() : 값 불일치. 예상값 2, 실제값 %v.", 에러내역.G발생횟수())
	}
}

func TestS식별코드별_에러내역_맵(테스트 *testing.T) {
	에러내역_맵 := new(S식별코드별_에러내역_맵)
	에러내역_맵.S에러내역_추가(1, F에러내역_생성("코드1-1", "설명1-1"))
	에러내역_맵.S에러내역_추가(1, F에러내역_생성("코드1-2", "설명1-2"))
	에러내역_맵.S에러내역_추가(2, F에러내역_생성("코드2-1", "설명2-1"))
	에러내역_맵.S에러내역_추가(2, F에러내역_생성("코드2-2", "설명2-2"))
	에러내역_맵.S에러내역_추가(2, F에러내역_생성("코드2-3", "설명2-3"))

	if len(에러내역_맵.G맵()) != 2 {
		테스트.Errorf("common.TestS식별코드별_에러내역_맵() : "+
			"len(에러내역_맵.G맵()) 불일치. 예상값 2, 실제값 %v.",
			len(에러내역_맵.G맵()))
	}

	if len(에러내역_맵.G에러내역_모음(1)) != 2 {
		테스트.Errorf("common.TestS식별코드별_에러내역_맵() : "+
			"len(에러내역_맵.G에러내역_모음(1)) 불일치. 예상값 2, 실제값 %v.",
			len(에러내역_맵.G에러내역_모음(1)))
	}

	if len(에러내역_맵.G에러내역_모음(2)) != 3 {
		테스트.Errorf("common.TestS식별코드별_에러내역_맵() : "+
			"len(에러내역_맵.G에러내역_모음(2)) 불일치. 예상값 3, 실제값 %v.",
			len(에러내역_맵.G에러내역_모음(2)))
	}

	// 같은 에러내역 중복추가 확인
	에러내역_맵.S에러내역_추가(1, F에러내역_생성("코드1-1", "설명1-1"))

	중복추가_에러내역_모음 := 에러내역_맵.G에러내역_모음(1)

	if len(중복추가_에러내역_모음) != 2 {
		테스트.Errorf("common.TestS식별코드별_에러내역_맵() : "+
			"중복추가 후 len(에러내역_맵.G에러내역_모음(\"A\")) 불일치. 예상값 2, 실제값 %v.",
			len(중복추가_에러내역_모음))
	}

	if 중복추가_에러내역_모음[0].G발생횟수() != 2 &&
		중복추가_에러내역_모음[1].G발생횟수() != 2 {
		테스트.Error("common.TestS식별코드별_에러내역_맵() : 중복추가 후 발생횟수가 증가하지 않았습니다.")
	}
}

func TestS종목코드별_에러내역_맵(테스트 *testing.T) {
	에러내역_맵 := new(S종목코드별_에러내역_맵)
	에러내역_맵.S에러내역_추가("A", F에러내역_생성("코드1-1", "설명1-1"))
	에러내역_맵.S에러내역_추가("A", F에러내역_생성("코드1-2", "설명1-2"))
	에러내역_맵.S에러내역_추가("B", F에러내역_생성("코드2-1", "설명2-1"))
	에러내역_맵.S에러내역_추가("B", F에러내역_생성("코드2-2", "설명2-2"))
	에러내역_맵.S에러내역_추가("B", F에러내역_생성("코드2-3", "설명2-3"))

	if len(에러내역_맵.G맵()) != 2 {
		테스트.Errorf("common.TestS종목코드별_에러내역_맵() : "+
			"len(에러내역_맵.G맵()) 불일치. 예상값 2, 실제값 %v.",
			len(에러내역_맵.G맵()))
	}

	if len(에러내역_맵.G에러내역_모음("A")) != 2 {
		테스트.Errorf("common.TestS종목코드별_에러내역_맵() : "+
			"len(에러내역_맵.G에러내역_모음(\"A\")) 불일치. 예상값 2, 실제값 %v.",
			len(에러내역_맵.G에러내역_모음("A")))
	}

	if len(에러내역_맵.G에러내역_모음("B")) != 3 {
		테스트.Errorf("common.TestS종목코드별_에러내역_맵() : "+
			"len(에러내역_맵.G에러내역_모음(\"B\")) 불일치. 예상값 3, 실제값 %v.",
			len(에러내역_맵.G에러내역_모음("B")))
	}

	// 같은 에러내역 중복추가 확인
	에러내역_맵.S에러내역_추가("A", F에러내역_생성("코드1-1", "설명1-1"))

	중복추가_에러내역_모음 := 에러내역_맵.G에러내역_모음("A")

	if len(중복추가_에러내역_모음) != 2 {
		테스트.Errorf("common.TestS종목코드별_에러내역_맵() : "+
			"중복추가 후 len(에러내역_맵.G에러내역_모음(\"A\")) 불일치. 예상값 2, 실제값 %v.",
			len(중복추가_에러내역_모음))
	}

	if 중복추가_에러내역_모음[0].G발생횟수() != 2 &&
		중복추가_에러내역_모음[1].G발생횟수() != 2 {
		테스트.Error("common.TestS종목코드별_에러내역_맵() : 중복추가 후 발생횟수가 증가하지 않았습니다.")
	}
}

func TestS가변형(테스트 *testing.T) {	
	var 가변형_변수 *S가변형
	
	var 참거짓 bool = true
	가변형_변수 = F가변형_생성(참거짓)
	참거짓_결과, 에러 := 가변형_변수.G참거짓()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G참거짓() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.Bool ||
		가변형_변수.G형식() != "bool" ||
		!가변형_변수.G상수형임() {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수 형식 불일치. 예상값 %v, %v, %v, 실제값 %v, %v, %v.", reflect.Bool, "bool", true, 가변형_변수.G종류(), 가변형_변수.G형식(), 가변형_변수.G상수형임())
	}
	if !참거짓_결과 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G참거짓() 불일치. 예상값 %v, 실제값 %v.", 참거짓, 참거짓_결과)
	}
	
	var 부호없는_정수 uint = 100
	가변형_변수 = F가변형_생성(부호없는_정수)
	부호없는_정수_결과, 에러 := 가변형_변수.G부호없는_정수()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G부호없는_정수() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.Uint ||
		가변형_변수.G형식() != "uint" ||
		!가변형_변수.G상수형임() {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수 형식 불일치. 예상값 %v, %v, %v, 실제값 %v, %v, %v.", reflect.Uint, "uint", true, 가변형_변수.G종류(), 가변형_변수.G형식(), 가변형_변수.G상수형임())
	}	
	if 부호없는_정수_결과 != 부호없는_정수 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G부호없는_정수() 불일치. 예상값 %v, 실제값 %v.", 부호없는_정수, 부호없는_정수_결과)
	}
	
	var 부호없는_정수8 uint8 = 100
	가변형_변수 = F가변형_생성(부호없는_정수8)
	부호없는_정수8_결과, 에러 := 가변형_변수.G부호없는_정수8()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G부호없는_정수8() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.Uint8 ||
		가변형_변수.G형식() != "uint8" {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G종류() 불일치. 예상값 %v, %v, 실제값 %v, %v.", reflect.Uint8, "uint8", 가변형_변수.G종류(), 가변형_변수.G형식())
	}	
	if 부호없는_정수8_결과 != 부호없는_정수8 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G부호없는_정수8() 불일치. 예상값 %v, 실제값 %v.", 부호없는_정수8, 부호없는_정수8_결과)
	}
	
	var 부호없는_정수16 uint16 = 100
	가변형_변수 = F가변형_생성(부호없는_정수16)
	부호없는_정수16_결과, 에러 := 가변형_변수.G부호없는_정수16()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G부호없는_정수16() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.Uint16 ||
		가변형_변수.G형식() != "uint16" {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G종류() 불일치. 예상값 %v, %v, 실제값 %v, %v.", reflect.Uint16, "uint16", 가변형_변수.G종류(), 가변형_변수.G형식())
	}	
	if 부호없는_정수16_결과 != 부호없는_정수16 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G부호없는_정수16() 불일치. 예상값 %v, 실제값 %v.", 부호없는_정수16, 부호없는_정수16_결과)
	}
	
	var 부호없는_정수32 uint32 = 100
	가변형_변수 = F가변형_생성(부호없는_정수32)
	부호없는_정수32_결과, 에러 := 가변형_변수.G부호없는_정수32()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G부호없는_정수32() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.Uint32 ||
		가변형_변수.G형식() != "uint32" {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G종류() 불일치. 예상값 %v, %v, 실제값 %v, %v.", reflect.Uint32, "uint32", 가변형_변수.G종류(), 가변형_변수.G형식())
	}	
	if 부호없는_정수32_결과 != 부호없는_정수32 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G부호없는_정수32() 불일치. 예상값 %v, 실제값 %v.", 부호없는_정수32, 부호없는_정수32_결과)
	}
	
	var 부호없는_정수64 uint64 = 100
	가변형_변수 = F가변형_생성(부호없는_정수64)
	부호없는_정수64_결과, 에러 := 가변형_변수.G부호없는_정수64()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G부호없는_정수64() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.Uint64 ||
		가변형_변수.G형식() != "uint64" {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G종류() 불일치. 예상값 %v, %v, 실제값 %v, %v.", reflect.Uint64, "uint64", 가변형_변수.G종류(), 가변형_변수.G형식())
	}	
	if 부호없는_정수64_결과 != 부호없는_정수64 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G부호없는_정수64() 불일치. 예상값 %v, 실제값 %v.", 부호없는_정수64, 부호없는_정수64_결과)
	}
	
	var 정수 int = 100
	가변형_변수 = F가변형_생성(정수)
	정수_결과, 에러 := 가변형_변수.G정수()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G정수() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.Int ||
		가변형_변수.G형식() != "int" {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G종류() 불일치. 예상값 %v, %v, 실제값 %v, %v.", reflect.Int, "int", 가변형_변수.G종류(), 가변형_변수.G형식())
	}
	if 정수_결과 != 정수 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G정수() 불일치. 예상값 %v, 실제값 %v.", 정수, 정수_결과)
	}
	
	var 정수8 int8 = 100
	가변형_변수 = F가변형_생성(정수8)
	정수8_결과, 에러 := 가변형_변수.G정수8()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G정수8() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.Int8 ||
		가변형_변수.G형식() != "int8" {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G종류() 불일치. 예상값 %v, %v, 실제값 %v, %v.", reflect.Int8, "int8", 가변형_변수.G종류(), 가변형_변수.G형식())
	}
	if 정수8_결과 != 정수8 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G정수8() 불일치. 예상값 %v, 실제값 %v.", 정수8, 정수8_결과)
	}
	
	var 정수16 int16 = 100
	가변형_변수 = F가변형_생성(정수16)
	정수16_결과, 에러 := 가변형_변수.G정수16()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G정수16() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.Int16 ||
		가변형_변수.G형식() != "int16" {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G종류() 불일치. 예상값 %v, %v, 실제값 %v, %v.", reflect.Int16, "int16", 가변형_변수.G종류(), 가변형_변수.G형식())
	}
	if 정수16_결과 != 정수16 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G정수16() 불일치. 예상값 %v, 실제값 %v.", 정수16, 정수16_결과)
	}
	
	var 정수32 int32 = 100
	가변형_변수 = F가변형_생성(정수32)
	정수32_결과, 에러 := 가변형_변수.G정수32()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G정수32() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.Int32 ||
		가변형_변수.G형식() != "int32" {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G종류() 불일치. 예상값 %v, %v, 실제값 %v, %v.", reflect.Int32, "int32", 가변형_변수.G종류(), 가변형_변수.G형식())
	}
	if 정수32_결과 != 정수32 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G정수32() 불일치. 예상값 %v, 실제값 %v.", 정수32, 정수32_결과)
	}
	
	var 정수64 int64 = 100
	가변형_변수 = F가변형_생성(정수64)
	정수64_결과, 에러 := 가변형_변수.G정수64()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G정수64() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.Int64 ||
		가변형_변수.G형식() != "int64" {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G종류() 불일치. 예상값 %v, %v, 실제값 %v, %v.", reflect.Int64, "int64", 가변형_변수.G종류(), 가변형_변수.G형식())
	}
	if 정수64_결과 != 정수64 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G정수64() 불일치. 예상값 %v, 실제값 %v.", 정수64, 정수64_결과)
	}
	
	var 실수32 float32 = 1.1
	가변형_변수 = F가변형_생성(실수32)
	실수32_결과, 에러 := 가변형_변수.G실수32()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G실수32() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.Float32 ||
		가변형_변수.G형식() != "float32" {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G종류() 불일치. 예상값 %v, %v, 실제값 %v, %v.", reflect.Float32, "float32", 가변형_변수.G종류(), 가변형_변수.G형식())
	}
	if 실수32_결과 != 실수32 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G실수32() 불일치. 예상값 %v, 실제값 %v.", 실수32, 실수32_결과)
	}
	
	var 실수64 float64 = 1.1
	가변형_변수 = F가변형_생성(실수64)
	실수64_결과, 에러 := 가변형_변수.G실수64()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G실수64() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.Float64 ||
		가변형_변수.G형식() != "float64" {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G종류() 불일치. 예상값 %v, %v, 실제값 %v, %v.", reflect.Float64, "float64", 가변형_변수.G종류(), 가변형_변수.G형식())
	}
	if 실수64_결과 != 실수64 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G실수64() 불일치. 예상값 %v, 실제값 %v.", 실수64, 실수64_결과)
	}
	
	실수_결과, 에러 := 가변형_변수.G실수()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G실수() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.Float64 ||
		가변형_변수.G형식() != "float64" {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G실수().G종류() 불일치. 예상값 %v, %v, 실제값 %v, %v.", reflect.Float64, "float64", 가변형_변수.G종류(), 가변형_변수.G형식())
	}
	if 실수_결과 != 실수64 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G실수() 불일치. 예상값 %v, 실제값 %v.", 실수64, 실수64_결과)
	}
	
	var 문자열 string = "테스트_문자열"
	가변형_변수 = F가변형_생성(문자열)
	문자열_결과, 에러 := 가변형_변수.G문자열()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G문자열() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.String ||
		가변형_변수.G형식() != "string" {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G종류() 불일치. 예상값 %v, %v, 실제값 %v, %v.", reflect.String, "string", 가변형_변수.G종류(), 가변형_변수.G형식())
	}
	if 문자열_결과 != 문자열 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G문자열() 불일치. 예상값 %v, 실제값 %v.", 문자열, 문자열_결과)
	}
	
	시점, _ := F문자열2일자("2000-01-01")
	가변형_변수 = F가변형_생성(시점)
	시점_결과, 에러 := 가변형_변수.G시점()
	if 에러 != nil {
		테스트.Error("common.TestS가변형_변수() : 가변형_변수.G시점() 에러.", 에러)
	}
	if 가변형_변수.G종류() != reflect.Struct ||
		가변형_변수.G형식() != "time.Time" {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G종류() 불일치. 예상값 %v, %v, 실제값 %v, %v.", reflect.Struct, "Time", 가변형_변수.G종류(), 가변형_변수.G형식())
	}
	if !시점_결과.Equal(시점) {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G시점() 불일치. 예상값 %v, 실제값 %v.", 시점, 시점_결과)
	}
	
	종목 := F종목_동화약품()
	가변형_변수 = F가변형_생성(종목)
	if 가변형_변수.G종류() != reflect.Ptr ||
		가변형_변수.G형식() != "*common.C종목" {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G종류() 불일치. 예상값 %v, %v, 실제값 %v, %v.", reflect.Ptr, "C종목", 가변형_변수.G종류(), 가변형_변수.G형식())
	}
	if 가변형_변수.G값() != 종목 {
		테스트.Errorf("common.TestS가변형_변수() : 가변형_변수.G시점() 불일치. 예상값 %v, 실제값 %v.", 종목, 가변형_변수.G값())
	}
}

func TestS매개변수(테스트 *testing.T) {	
	매개변수1 := F매개변수_생성("이름1", F종목_동화약품())	
	if 매개변수1.G이름() != "이름1" {
		테스트.Errorf("common.TestS매개변수() : S매개변수.G이름() 불일치. 예상값 %v, 실제값 %v.", "이름1", 매개변수1.G이름())
	}
	
	if 매개변수1.G값().(*C종목).G종목코드() != F종목_동화약품().G종목코드() {
		테스트.Errorf("common.TestS매개변수() : S매개변수.G값() 불일치. 예상값 %v, 실제값 %v.", F종목_동화약품().G종목코드(), 매개변수1.G값().(*C종목).G종목코드())
	}
	
	매개변수2 := F매개변수_생성("이름2", F가변형_생성(F종목_삼성전자())) 
	if 매개변수2.G이름() != "이름2" {
		테스트.Errorf("common.TestS매개변수() : S매개변수.G이름() 불일치. 예상값 %v, 실제값 %v.", "이름2", 매개변수2.G이름())
	}
	
	if 매개변수2.G값().(*C종목).G종목코드() != F종목_삼성전자().G종목코드() {
		테스트.Errorf("common.TestS매개변수() : S매개변수.G값() 불일치. 예상값 %v, 실제값 %v.", F종목_삼성전자().G종목코드(), 매개변수2.G값().(*C종목).G종목코드())
	}
}

func TestS매개변수_모음(테스트 *testing.T) {	
	시점, _ := F문자열2일자("2000-01-01")
	
	s := new(S매개변수_모음)
	s.S추가("정수", int(1))
	s.S추가("문자열", "two")
	s.S추가("실수", float64(3.0))
	s.S추가("시점", 시점)
	
	if s.G수량() != 4 {
		테스트.Error("common.TestS매개변수_모음() : G수량() 불일치. 추가 확인 필요함.")
	}
	
	if !s.G이미_있음("정수") ||
		!s.G이미_있음("문자열") ||
		!s.G이미_있음("실수") ||
		!s.G이미_있음("시점") ||
		s.G이미_있음("없음") {
		테스트.Error("common.TestS매개변수_모음() : G이미_있음() 불일치. 추가 확인 필요함.")
	}
	
	if s.G값("정수").(int) != 1 ||
		s.G값("문자열").(string) != "two" ||
		s.G값("실수").(float64) != 3.0 ||
		!s.G값("시점").(time.Time).Equal(시점) {
		테스트.Error("common.TestS매개변수_모음() : G값() 불일치. 추가 확인 필요함.")
	}
	
	정수, _ := s.G가변형("정수").G정수(); 
	문자열, _ := s.G가변형("문자열").G문자열();
	실수, _ := s.G가변형("실수").G실수64();
	시점2, _ := s.G가변형("시점").G시점();	
	
	if 정수 != 1 ||
		문자열 != "two" ||
		실수 != 3.0 ||
		!시점2.Equal(시점) {
		테스트.Error("common.TestS매개변수_모음() : G가변형() 불일치. 추가 확인 필요함.")
	}
	
	매개변수_모음 := s.G매개변수_모음()
	if len(매개변수_모음) != 4 {
		테스트.Error("common.TestS매개변수_모음() : G매개변수_모음() 수량 불일치. 추가 확인 필요함.")
	}
	
	if 매개변수_모음[0].G이름() != "정수" &&
		매개변수_모음[0].G이름() != "문자열" &&
		매개변수_모음[0].G이름() != "실수" &&
		매개변수_모음[0].G이름() != "시점" {
		테스트.Error("common.TestS매개변수_모음() : G매개변수_모음() 이름 불일치. 추가 확인 필요함.")
	}
	
	복제 := s.G복제()
	
	if 복제.G수량() != 4 {
		테스트.Error("common.TestS매개변수_모음() : 복제().G수량() 불일치. 추가 확인 필요함.")
	}
	
	if !복제.G이미_있음("정수") ||
		!복제.G이미_있음("문자열") ||
		!복제.G이미_있음("실수") ||
		!복제.G이미_있음("시점") ||
		복제.G이미_있음("없음") {
		테스트.Error("common.TestS매개변수_모음() : 복제().G이미_있음() 불일치. 추가 확인 필요함.")
	}
	
	if 복제.G값("정수").(int) != 1 ||
		복제.G값("문자열").(string) != "two" ||
		복제.G값("실수").(float64) != 3.0 ||
		!복제.G값("시점").(time.Time).Equal(시점) {
		테스트.Error("common.TestS매개변수_모음() : 복제().G값() 불일치. 추가 확인 필요함.")
	}
}