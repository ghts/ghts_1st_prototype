package common

import (
	"log"
)

func F종목별_포트폴리오_통합관리_생성(식별코드 uint64, 종목 *C종목) *S종목별_포트폴리오_통합관리 {
	s := new(S종목별_포트폴리오_통합관리)
	s.식별코드 = 식별코드
	s.종목 = 종목
	
	return s
}

// 하나의 종목에 대한 각 전략의 포트폴리오를 한데 모아서 통합적으로 하나처럼 관리하도록 하는 목적임.
type S종목별_포트폴리오_통합관리 struct {
	식별코드 uint64
	통화_식별코드 P통화
	종목 *C종목
	종목별_포트폴리오_통합관리 []I종목별_포트폴리오	
}
func (s *S종목별_포트폴리오_통합관리) 초기화() {
	if s.종목별_포트폴리오_통합관리 == nil {
		s.종목별_포트폴리오_통합관리 = make([]I종목별_포트폴리오, 0)
	}
}
func (s *S종목별_포트폴리오_통합관리) G식별코드() uint64 { return s.식별코드 }
func (s *S종목별_포트폴리오_통합관리) G통화_식별코드() P통화 { return s.통화_식별코드 }
func (s *S종목별_포트폴리오_통합관리) G종목() *C종목 { return s.종목 }

func (s *S종목별_포트폴리오_통합관리) S추가(종목별_포트폴리오 I종목별_포트폴리오) {
	if s.종목별_포트폴리오_통합관리 == nil { s.초기화() }
	
	s.종목별_포트폴리오_통합관리 = append(s.종목별_포트폴리오_통합관리, 종목별_포트폴리오)
}
func (s *S종목별_포트폴리오_통합관리) G단가() I통화 {
	if s.종목별_포트폴리오_통합관리 == nil { s.초기화() }
	
	log.Println("TODO : 전일종가 검색 펑션 구현해 놓은 것 불러오기.")
	
	panic("TODO : 전일종가 검색 펑션 구현해 놓은 것 불러오기.")
	
	// 임시조치
	log.Println("S종목별_포트폴리오_통합관리 : G단가() 구현 안 됨.")
	return F통화_생성(KRW, 0.0)
}
func (s *S종목별_포트폴리오_통합관리) G롱포지션_수량() uint64 {
	합계 := uint64(0)
	
	for _, 종목별_포트폴리오 := range s.종목별_포트폴리오_통합관리 {
		합계 = 합계 + 종목별_포트폴리오.G롱포지션_수량()
	}
	
	return 합계
}
func (s *S종목별_포트폴리오_통합관리) G숏포지션_수량() uint64 {
	if s.종목별_포트폴리오_통합관리 == nil { s.초기화() }
	
	합계 := uint64(0)
	
	for _, 종목별_포트폴리오 := range s.종목별_포트폴리오_통합관리 {
		합계 = 합계 + 종목별_포트폴리오.G숏포지션_수량()
	}
	
	return 합계
}
func (s *S종목별_포트폴리오_통합관리) G순_수량() uint64 {
	if s.종목별_포트폴리오_통합관리 == nil { s.초기화() }
	
	합계 := uint64(0)
	
	for _, 종목별_포트폴리오 := range s.종목별_포트폴리오_통합관리 {
		합계 = 합계 + 종목별_포트폴리오.G순_수량()
	}
	
	return 합계
}
func (s *S종목별_포트폴리오_통합관리) G총_수량() uint64 {
	if s.종목별_포트폴리오_통합관리 == nil { s.초기화() }
	
	합계 := uint64(0)
	
	for _, 종목별_포트폴리오 := range s.종목별_포트폴리오_통합관리 {
		합계 = 합계 + 종목별_포트폴리오.G총_수량()
	}
	
	return 합계
}
func (s *S종목별_포트폴리오_통합관리) G롱포지션_금액() I통화 {
	if s.종목별_포트폴리오_통합관리 == nil { s.초기화() }
	
	합계 := float64(0.0)
	
	for _, 종목별_포트폴리오 := range s.종목별_포트폴리오_통합관리 {
		합계 = 합계 + 종목별_포트폴리오.G롱포지션_금액().G값()
	}
	
	return F통화_생성(s.G통화_식별코드(), 합계)
}
func (s *S종목별_포트폴리오_통합관리) G숏포지션_금액() I통화 {
	if s.종목별_포트폴리오_통합관리 == nil { s.초기화() }
	
	합계 := float64(0.0)
	
	for _, 종목별_포트폴리오 := range s.종목별_포트폴리오_통합관리 {
		합계 = 합계 + 종목별_포트폴리오.G숏포지션_금액().G값()
	}
	
	return F통화_생성(s.G통화_식별코드(), 합계)
}
func (s *S종목별_포트폴리오_통합관리) G순_금액() I통화 {
	if s.종목별_포트폴리오_통합관리 == nil { s.초기화() }
	
	합계 := float64(0.0)
	
	for _, 종목별_포트폴리오 := range s.종목별_포트폴리오_통합관리 {
		합계 = 합계 + 종목별_포트폴리오.G순_금액().G값()
	}
	
	return F통화_생성(s.G통화_식별코드(), 합계)
}
func (s *S종목별_포트폴리오_통합관리) G총_금액() I통화 {
	if s.종목별_포트폴리오_통합관리 == nil { s.초기화() }
	
	합계 := float64(0.0)
	
	for _, 종목별_포트폴리오 := range s.종목별_포트폴리오_통합관리 {
		합계 = 합계 + 종목별_포트폴리오.G총_금액().G값()
	}
	
	return F통화_생성(s.G통화_식별코드(), 합계)
}