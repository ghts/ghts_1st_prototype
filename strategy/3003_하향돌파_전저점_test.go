package base

import (
	"fmt"
	"log"
	"math"
	공통 "pts/common"
	"testing"
)

func TestF저점_찾기_단순버전(테스트 *testing.T) {
	일일가격정보_모음 := 저점_찾기_테스트용_가장_간단한_모의_데이터()

	내용 := 일일가격정보_모음.G내용()

	var 저점 *공통.C일일가격정보
	var 최저조정가 float64 = 1.0E+100

	//fmt.Println("최저조정가 초기값", 최저조정가)

	for _, 일일가격정보 := range 내용 {
		if 일일가격정보.G조정시가() <= 0.0 ||
			math.IsNaN(일일가격정보.G조정시가()) ||
			math.IsInf(일일가격정보.G조정시가(), 0) ||
			일일가격정보.G조정종가() <= 0.0 ||
			math.IsNaN(일일가격정보.G조정종가()) ||
			math.IsInf(일일가격정보.G조정종가(), 0) {
			continue
		}

		//fmt.Println(일일가격정보.G조정시가(), 일일가격정보.G조정종가())

		if 일일가격정보.G조정시가() < 최저조정가 {
			저점 = 일일가격정보
			최저조정가 = 일일가격정보.G조정시가()
		}

		if 일일가격정보.G조정종가() < 최저조정가 {
			저점 = 일일가격정보
			최저조정가 = 일일가격정보.G조정종가()
		}
	}

	예상_저점 := 저점

	//fmt.Println(예상_저점.G조정시가(), 예상_저점.G조정종가(), 예상_저점.G일자())

	기준일 := 예상_저점.G일자().AddDate(0, 0, 15)
	검색범위 := 30
	에러, 저점 := F저점_찾기_단순버전(일일가격정보_모음, 기준일, 검색범위)

	if 에러 != nil {
		log.Println(에러.Error())
		테스트.Error("F저점_찾기_단순버전() 에러. 호출 후 에러발생.", 에러.Error())
	}

	if !저점.G일자().Equal(예상_저점.G일자()) {
		테스트.Error("F저점_찾기_단순버전() 에러. 저점 일자가 예상과 다름.")
		fmt.Println("예상 저점 일자", 예상_저점.G일자())
		fmt.Println("찾은 저점 일자", 저점.G일자())
	}
}

func TestF저점_찾기(테스트 *testing.T) {
	일일가격정보_모음 := 저점_찾기_테스트용_가장_간단한_모의_데이터()

	내용 := 일일가격정보_모음.G내용()

	var 저점 *공통.C일일가격정보
	var 최저조정가 float64 = 1.0E+100

	for _, 일일가격정보 := range 내용 {
		if 일일가격정보.G조정시가() <= 0.0 ||
			math.IsNaN(일일가격정보.G조정시가()) ||
			math.IsInf(일일가격정보.G조정시가(), 0) ||
			일일가격정보.G조정종가() <= 0.0 ||
			math.IsNaN(일일가격정보.G조정종가()) ||
			math.IsInf(일일가격정보.G조정종가(), 0) {
			continue
		}

		if 일일가격정보.G조정시가() < 최저조정가 {
			저점 = 일일가격정보
			최저조정가 = 일일가격정보.G조정시가()
		}

		if 일일가격정보.G조정종가() < 최저조정가 {
			저점 = 일일가격정보
			최저조정가 = 일일가격정보.G조정종가()
		}
	}

	예상_저점 := 저점

	for i := 0; i < 10; i++ {
		기준일 := 예상_저점.G일자().AddDate(0, 0, i*5)
		검색범위 := 30

		에러, 저점 := F저점_찾기(일일가격정보_모음, 기준일, 검색범위)

		if 에러 != nil {
			테스트.Error("F저점_찾기() 에러. F저점_찾기() 호출 후 에러 발생", 에러.Error(), i)
		}

		if !저점.G일자().Equal(예상_저점.G일자()) {
			테스트.Error("F저점_찾기() 에러. 저점 일자가 예상과 다름. i :", i)
			log.Println("*****************************************************")
			log.Println("F저점_찾기() 에러. 저점 일자가 예상과 다름. i :", i)
			log.Println("*****************************************************")
			log.Println("예상 저점 일자", 예상_저점.G일자())
			log.Println("찾은 저점 일자", 저점.G일자())
			log.Println("기준일", 기준일)
			log.Println("검색범위", 검색범위)
		}
	}
}

func TestF저점_찾기_선행기간_확인_1(테스트 *testing.T) {
	일일가격정보_모음 := 저점_찾기_테스트용_주기적으로_하루씩_등락이_있는_모의_데이터()

	내용 := 일일가격정보_모음.G내용()

	var 저점 *공통.C일일가격정보
	var 최저조정가 float64 = 1.0E+100

	for _, 일일가격정보 := range 내용 {
		if 일일가격정보.G조정시가() <= 0.0 ||
			math.IsNaN(일일가격정보.G조정시가()) ||
			math.IsInf(일일가격정보.G조정시가(), 0) ||
			일일가격정보.G조정종가() <= 0.0 ||
			math.IsNaN(일일가격정보.G조정종가()) ||
			math.IsInf(일일가격정보.G조정종가(), 0) {
			continue
		}

		if 일일가격정보.G조정시가() < 최저조정가 {
			저점 = 일일가격정보
			최저조정가 = 일일가격정보.G조정시가()
		}

		if 일일가격정보.G조정종가() < 최저조정가 {
			저점 = 일일가격정보
			최저조정가 = 일일가격정보.G조정종가()
		}
	}

	예상_저점 := 저점

	for i := 0; i < 10; i++ {
		//fmt.Println("i", i)

		기준일 := 예상_저점.G일자().AddDate(0, 0, i*5)
		검색범위 := 30
		선행기간 := 2

		에러, 저점 := F저점_찾기_선행기간_확인(일일가격정보_모음, 기준일, 검색범위, 선행기간)

		if 에러 != nil {
			테스트.Error("F저점_찾기_선행기간_확인_1() 에러. F저점_찾기_선행기간_확인() 호출 후 에러.", 에러.Error(), i)
		}

		if !저점.G일자().Equal(예상_저점.G일자()) {
			테스트.Error("F저점_찾기_선행기간_확인_1() 에러. 저점 일자가 예상과 다름.", i)
			fmt.Println("예상 저점 일자", 예상_저점.G일자())
			fmt.Println("찾은 저점 일자", 저점.G일자())
			fmt.Println("기준일", 기준일)
			fmt.Println("검색범위", 검색범위)
			fmt.Println("선행기간", 선행기간)
		}
	}
}

func TestF저점_찾기_선행기간_확인_2(테스트 *testing.T) {
	일일가격정보_모음 := 저점_찾기_테스트용_주기적으로_이틀_연속_등락이_있는_모의_데이터()

	내용 := 일일가격정보_모음.G내용()

	var 저점 *공통.C일일가격정보
	var 최저조정가 float64 = 1.0E+100

	for _, 일일가격정보 := range 내용 {
		if 일일가격정보.G조정시가() <= 0.0 ||
			math.IsNaN(일일가격정보.G조정시가()) ||
			math.IsInf(일일가격정보.G조정시가(), 0) ||
			일일가격정보.G조정종가() <= 0.0 ||
			math.IsNaN(일일가격정보.G조정종가()) ||
			math.IsInf(일일가격정보.G조정종가(), 0) {
			continue
		}

		if 일일가격정보.G조정시가() < 최저조정가 {
			저점 = 일일가격정보
			최저조정가 = 일일가격정보.G조정시가()
		}

		if 일일가격정보.G조정종가() < 최저조정가 {
			저점 = 일일가격정보
			최저조정가 = 일일가격정보.G조정종가()
		}
	}

	예상_저점 := 저점

	for i := 0; i < 10; i++ {
		//fmt.Println("i", i)

		기준일 := 예상_저점.G일자().AddDate(0, 0, i*5)
		검색범위 := 30
		선행기간 := 3

		에러, 저점 := F저점_찾기_선행기간_확인(일일가격정보_모음, 기준일, 검색범위, 선행기간)

		if 에러 != nil {
			테스트.Error("F저점_찾기_선행기간_확인_2() 에러. F저점_찾기_선행기간_확인() 호출 후 에러.", 에러.Error(), i)
		}

		if !저점.G일자().Equal(예상_저점.G일자()) {
			테스트.Error("F저점_찾기_선행기간_확인_2() 에러. 저점 일자가 예상과 다름.", i)
			fmt.Println("예상 저점 일자", 예상_저점.G일자())
			fmt.Println("찾은 저점 일자", 저점.G일자())
			fmt.Println("기준일", 기준일)
			fmt.Println("검색범위", 검색범위)
			fmt.Println("선행기간", 선행기간)
		}
	}
}
