package base

import (
	//공통 "pts/common"
	"log"
	"testing"
)

func TestF일일가격_단순이동평균_도우미_1(테스트 *testing.T) {
	일일가격정보_모음 := 단순이동평균_도우미_테스트용_모의_데이터_1()
	내용 := 일일가격정보_모음.G내용()

	var 합계 float64 = 0.0
	for _, 일일가격정보 := range 내용 {
		합계 = 합계 +
			0.25*일일가격정보.G시가() +
			0.25*일일가격정보.G고가() +
			0.25*일일가격정보.G저가() +
			0.25*일일가격정보.G종가()
	}

	예상값 := 합계 / float64(len(내용))

	에러, 결과 := 일일가격_단순이동평균_도우미(
		5,
		일일가격정보_모음,
		내용[0].G일자(),
		내용[4].G일자(),
		0.25, 0.25, 0.25, 0.25)

	if 에러 != nil {
		테스트.Error("TestF일일가격_단순이동평균_도우미_2() 에러 발생.", 에러)
	}

	실제값 := 결과[len(결과)-1].G값()

	//log.Println(예상값, 실제값)

	if 예상값 != 실제값 {
		테스트.Error("TestF일일가격_단순이동평균_도우미_1() 에러. 예상값과 실제값이 다름.")
		log.Println("TestF일일가격_단순이동평균_도우미_1() 에러. 예상값과 실제값이 다름.", "예상값", 예상값, "실제값", 실제값)
	}
}

func TestF일일가격_단순이동평균_도우미_2(테스트 *testing.T) {
	일일가격정보_모음 := 단순이동평균_도우미_테스트용_모의_데이터_2()
	내용 := 일일가격정보_모음.G내용()

	var 합계 float64 = 0.0
	for _, 일일가격정보 := range 내용 {
		//log.Println(인덱스, 일일가격정보.G일자(), 일일가격정보.G시가(), 일일가격정보.G고가(), 일일가격정보.G저가(), 일일가격정보.G종가())

		합계 = 합계 +
			0.2*일일가격정보.G시가() +
			0.3*일일가격정보.G고가() +
			0.1*일일가격정보.G저가() +
			0.4*일일가격정보.G종가()
	}

	예상값 := 합계 / float64(len(내용)-2) // 중간에 가격정보 0인 것이 2일 있는 것 제외.

	에러, 결과 := 일일가격_단순이동평균_도우미(
		5,
		일일가격정보_모음,
		내용[0].G일자(),
		내용[6].G일자(),
		0.2, 0.3, 0.1, 0.4)

	if 에러 != nil {
		테스트.Error("TestF일일가격_단순이동평균_도우미_2() 에러 발생.", 에러)
	}

	실제값 := 결과[len(결과)-1].G값()

	//log.Println(예상값, 실제값)

	if 예상값 != 실제값 {
		테스트.Error("TestF일일가격_단순이동평균_도우미_2() 에러. 예상값과 실제값이 다름.")
		log.Println("TestF일일가격_단순이동평균_도우미_2() 에러. 예상값과 실제값이 다름.", "예상값", 예상값, "실제값", 실제값)
	}
}
