package tools

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"log"
	공통 "pts/common"
	"testing"
	"time"
)

// 테스트 케이스를 어떻게 만들 것인지 구상해 보자.
// 1. 존재하지 않는 데이터만 가져오는 지 테스트할 것.
//		a. 테스트 케이스에서 자체적으로 몇 개의 데이터를 DB에 기록한다.
// 		b. 테스트용_문자열_슬라이스_불러오기()에서 시작일, 종료일을 기록하게 한다.
//		c. 시작일, 종료일을 확인하여 이미 존재하는 데이터의 가장 최근일 및 그 이후 데이터만 가져오는 지 확인할 것.
// 2. 과거 데이터의 조정종가가 변경된 경우에 모든 데이터를 가져오는 지 테스트할 것.
//		a. 테스트 케이스에서 자체적으로 몇 개의 데이터를 DB에 기록한다.
//		b. 기록된 조정종가를 변경하여 10% 높인다.
// 		c. 이제 테스트용_문자열_슬라이스_불러오기()은 기존 데이터에 비해서 조정종가가 10% 낮아진 상태가 된다.
//		d. 테스트용_문자열_슬라이스_불러오기()에서 시작일, 종료일을 기록하게 한다.
//		e. 시작일, 종료일을 확인하여 2번에 걸쳐서 모든 데이터를 가져오는 지 확인할 것.

func 일일가격정보_불러오기_테스트_모드_시작() {
	일일가격정보_불러오기_도우미 = 테스트용_문자열_슬라이스_불러오기

	시작일_종료일_기록하기 = true
	시작일_종료일_기록_저장소 = make([][]time.Time, 0)
}

func 일일가격정보_불러오기_테스트_모드_종료() {
	일일가격정보_불러오기_도우미 = 일일가격정보_불러오기_도우미_야후_한국

	시작일_종료일_기록하기 = false
	시작일_종료일_기록_저장소 = nil
}

func TestF종목별_일일가격정보_확보_1_초기에_모든_데이터_가져오기(테스트 *testing.T) {
	공통.F테스트_모드_시작()
	defer 공통.F테스트_모드_종료()
	공통.F종목정보_테이블_생성()
	defer 공통.F테이블_삭제(공통.F종목정보_테이블())
	공통.F일일가격정보_테이블_생성()
	defer 공통.F테이블_삭제(공통.F일일가격정보_테이블())

	에러 := 공통.F종목정보_맵_DB기록(공통.F종목정보_맵_테스트용())
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_1() :( F종목정보_맵_DB기록() 에러.", 에러)
	}

	/*
		1. 초기에 기존 일일가격정보가 존재하지 않는 경우에 모든 데이터 가져오는 지 확인할 것.
			a. 초기에 DB테이블이 비어있는 상태로 시작.
			b. 테스트용_문자열_슬라이스_불러오기()에서 시작일, 종료일을 기록한다.
			c. 시작일, 종료일을 확인하여 모든 데이터를 가져오는 지 확인한다.
			d. 기록된 데이터의 수량을 확인하여 모든 데이터가 기록되었는 지 확인.
	*/
	일일가격정보_불러오기_테스트_모드_시작()
	defer 일일가격정보_불러오기_테스트_모드_종료()

	에러 = F종목별_일일가격정보_확보(공통.F종목_동화약품())
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_1() : F종목별_일일가격정보_확보() 에러.", 에러)
	}

	// 시작일, 종료일 확인
	if len(시작일_종료일_기록_저장소) != 1 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_1() : 데이터 액세스 횟수 불일치. 예상값 1, 실제값 %v.", len(시작일_종료일_기록_저장소))
	}

	기록된_시작일 := 시작일_종료일_기록_저장소[0][0]
	if 기록된_시작일.Format("2006-01-02") != "1900-01-01" {
		테스트.Errorf("TestF종목별_일일가격정보_확보_1() : 기록된 시작일 불일치. 예상값 1900-01-01, 실제값 %v.", 기록된_시작일.Format("2006-01-02"))
	}

	기록된_종료일 := 시작일_종료일_기록_저장소[0][1]
	if 기록된_종료일.Format("2006-01-02") != time.Now().Format("2006-01-02") {
		테스트.Errorf("TestF종목별_일일가격정보_확보_1() : 기록된 종료일 불일치. 예상값 %v, 실제값 %v.", time.Now().Format("2006-01-02"), 기록된_종료일.Format("2006-01-02"))
	}

	// 데이터 수량 확인
	종목별_일일가격정보_모음, 에러 := 공통.F종목별_일일가격정보_모음(공통.F종목_동화약품())
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_1() : common.F종목별_일일가격정보_모음() 에러.", 에러)
	}

	기록된_수량 := len(종목별_일일가격정보_모음.G슬라이스())
	if 기록된_수량 == 0 {
		테스트.Error("TestF종목별_일일가격정보_확보_1() : 데이터가 기록되지 않았습니다.")
	}

	// 기록된 상태 확인
	일자_20140718, _ := 공통.F문자열2일자("2014-07-18")
	일일가격정보 := 종목별_일일가격정보_모음.G일일가격정보(일자_20140718)

	if 일일가격정보.G일자() != 공통.F일자(일자_20140718) {
		테스트.Errorf("TestF종목별_일일가격정보_확보_1() : 일자 불일치. 예상값 %v, 실제값 %v", 공통.F일자(일자_20140718), 일일가격정보.G일자())
	}

	if 일일가격정보.G시가() != 5470.00 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_1() : 시가 불일치. 예상값 5470.0, 실제값 %v", 일일가격정보.G시가())
	}

	if 일일가격정보.G고가() != 5500.00 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_1() : 고가 불일치. 예상값 5500.0, 실제값 %v", 일일가격정보.G고가())
	}

	if 일일가격정보.G저가() != 5410.00 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_1() : 저가 불일치. 예상값 5410.0, 실제값 %v", 일일가격정보.G저가())
	}

	if 일일가격정보.G종가() != 5440.00 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_1() : 종가 불일치. 예상값 5440.0, 실제값 %v", 일일가격정보.G종가())
	}

	if 일일가격정보.G거래량() != 46300 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_1() : 거래량 불일치. 예상값 46300, 실제값 %v", 일일가격정보.G거래량())
	}

	if 일일가격정보.G조정종가() != 5440.0 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_1() : 조정종가 불일치. 예상값 5440.0, 실제값 %v", 일일가격정보.G조정종가())
	}
}

func TestF종목별_일일가격정보_확보_2_새로운_데이터만_가져오기(테스트 *testing.T) {
	/*
		2. 기존에 존재하는 데이터는 불러오지 않고, 없는 데이터만 가져오는 지 테스트할 것.
			a. 테스트 케이스에서 자체적으로 몇 개의 데이터를 DB에 기록한다.
			b. 테스트용_문자열_슬라이스_불러오기()에서 시작일, 종료일을 기록한다.
			c. 시작일, 종료일을 확인하여 기존 데이터 중 가장 날짜 및 그 이후의 데이터만 가져오는 지 확인할 것.
	*/

	공통.F테스트_모드_시작()
	defer 공통.F테스트_모드_종료()
	공통.F종목정보_테이블_생성()
	defer 공통.F테이블_삭제(공통.F종목정보_테이블())
	공통.F일일가격정보_테이블_생성()
	defer 공통.F테이블_삭제(공통.F일일가격정보_테이블())

	에러 := 공통.F종목정보_맵_DB기록(공통.F종목정보_맵_테스트용())
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_2() : F종목정보_맵_DB기록() 에러.", 에러)
	}

	// 기존 데이터가 존재하는 상태로 만들기.
	시작일, _ := 공통.F문자열2일자("1900-01-01")
	종료일, _ := 공통.F문자열2일자("2014-07-14")

	초기_데이터용_문자열_슬라이스, 에러 := 테스트용_문자열_슬라이스_불러오기(공통.F종목_동화약품(), 시작일, 종료일)
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_2() : 테스트용_문자열_슬라이스_불러오기() 에러.")
	}

	초기_일일가격정보_모음, _ := 종목별_일일가격정보_모음_생성_도우미(공통.F종목_동화약품(), 초기_데이터용_문자열_슬라이스)
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_2() : 종목별_일일가격정보_모음_생성_도우미() 에러.")
	}

	에러 = 공통.F일일가격정보_모음_DB기록(초기_일일가격정보_모음)
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_2() : common.F일일가격정보_모음_DB기록(초기_일일가격정보_모음) 에러.", 에러)
	}

	종목별_일일가격정보_모음, 에러 := 공통.F종목별_일일가격정보_모음(공통.F종목_동화약품())
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_2() : common.F종목별_일일가격정보_모음() 에러.", 에러)
	}

	초기_수량 := len(종목별_일일가격정보_모음.G슬라이스())
	if 초기_수량 == 0 {
		테스트.Error("TestF종목별_일일가격정보_확보_2() : 초기 데이터 설정할 수 없습니다. 추가 확인이 필요함.")
	}
	// 여기까지 기존 데이터가 존재하는 상태로 만들었음.

	// 추가 데이터 확보 과정 시작.
	일일가격정보_불러오기_테스트_모드_시작()
	defer 일일가격정보_불러오기_테스트_모드_종료()

	에러 = F종목별_일일가격정보_확보(공통.F종목_동화약품())
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_2() : F종목별_일일가격정보_확보() 에러.", 에러)
	}

	// 시작일, 종료일 확인
	if len(시작일_종료일_기록_저장소) != 1 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 데이터 액세스 횟수 불일치. 예상값 1, 실제값 %v.", len(시작일_종료일_기록_저장소))
	}

	기록된_시작일 := 시작일_종료일_기록_저장소[0][0]
	if 기록된_시작일.Format("2006-01-02") != "2014-07-14" {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 기록된 시작일 불일치. 예상값 2014-07-14, 실제값 %v.", 기록된_시작일.Format("2006-01-02"))
	}

	기록된_종료일 := 시작일_종료일_기록_저장소[0][1]
	if 기록된_종료일.Format("2006-01-02") != time.Now().Format("2006-01-02") {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 기록된 종료일 불일치. 예상값 %v, 실제값 %v.", time.Now().Format("2006-01-02"), 기록된_종료일.Format("2006-01-02"))
	}

	// 추가로 데이터가 제대로 기록되었는 지 확인.
	종목별_일일가격정보_모음, 에러 = 공통.F종목별_일일가격정보_모음(공통.F종목_동화약품())
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_2() : common.F종목별_일일가격정보_모음() 에러.", 에러)
	}

	기록된_수량 := len(종목별_일일가격정보_모음.G슬라이스())
	if 초기_수량 >= 기록된_수량 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 데이터가 추가되지 않았습니다. 초기 수량 %v, 추가 후 수량 %v", 초기_수량, 기록된_수량)
	}

	// 기록된 상태 확인.
	일자_20140718, _ := 공통.F문자열2일자("2014-07-18")
	일일가격정보 := 종목별_일일가격정보_모음.G일일가격정보(일자_20140718)

	if 일일가격정보.G일자() != 공통.F일자(일자_20140718) {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 일자 불일치. 예상값 %v, 실제값 %v", 공통.F일자(일자_20140718), 일일가격정보.G일자())
	}

	if 일일가격정보.G시가() != 5470.00 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 시가 불일치. 예상값 5470.0, 실제값 %v", 일일가격정보.G시가())
	}

	if 일일가격정보.G고가() != 5500.00 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 고가 불일치. 예상값 5500.0, 실제값 %v", 일일가격정보.G고가())
	}

	if 일일가격정보.G저가() != 5410.00 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 저가 불일치. 예상값 5410.0, 실제값 %v", 일일가격정보.G저가())
	}

	if 일일가격정보.G종가() != 5440.00 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 종가 불일치. 예상값 5440.0, 실제값 %v", 일일가격정보.G종가())
	}

	if 일일가격정보.G거래량() != 46300 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 거래량 불일치. 예상값 46300, 실제값 %v", 일일가격정보.G거래량())
	}

	if 일일가격정보.G조정종가() != 5440.0 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 조정종가 불일치. 예상값 5440.0, 실제값 %v", 일일가격정보.G조정종가())
	}
}

func TestF종목별_일일가격정보_확보_3_조정종가_변경시_모든_데이터_읽어오기(테스트 *testing.T) {
	/*
		3. 과거 데이터의 조정종가가 변경된 경우, 기존 데이터를 포함한 모든 데이터를 가져오는 지 테스트할 것.
			a. 테스트 케이스에서 자체적으로 몇 개의 데이터를 DB에 기록한다.
			b. 기존 데이터의 조정종가를 10% 높인다.
				이로써, 이후에 테스트용_문자열_슬라이스_불러오기()에서 불러오는 데이터는 기존 데이터에 비해서 조정종가가 10% 낮아진 상태가 된다.
			c. 테스트용_문자열_슬라이스_불러오기()에서 시작일, 종료일을 기록한다.
			d. 시작일, 종료일을 확인하여 2번에 걸쳐서 모든 데이터를 가져오는 지 확인한다.
			e. 기존 데이터의 조정종가가 고쳐졌는 지 확인한다.
	*/

	공통.F테스트_모드_시작()
	defer 공통.F테스트_모드_종료()
	공통.F종목정보_테이블_생성()
	defer 공통.F테이블_삭제(공통.F종목정보_테이블())
	공통.F일일가격정보_테이블_생성()
	defer 공통.F테이블_삭제(공통.F일일가격정보_테이블())

	에러 := 공통.F종목정보_맵_DB기록(공통.F종목정보_맵_테스트용())
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_3() : F종목정보_맵_DB기록() 에러.", 에러)
	}

	// 기존 데이터가 존재하는 상태로 만들기.
	종목 := 공통.F종목검색(공통.F종목_동화약품().G종목코드())
	시작일, _ := 공통.F문자열2일자("1900-01-01")
	종료일, _ := 공통.F문자열2일자("2014-07-14")

	일일가격정보_불러오기_테스트_모드_시작()

	초기_일일가격정보_모음, 에러 := 종목별_일일가격정보_확보_도우미_통합(종목, 시작일, 종료일)
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_3() : 종목별_일일가격정보_확보_도우미_통합() 에러.", 에러)
	}

	에러 = 공통.F일일가격정보_모음_DB기록(초기_일일가격정보_모음)
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_3() : common.F일일가격정보_모음_DB기록(초기_일일가격정보_모음) 에러.", 에러)
	}

	초기_일일가격정보_모음, 에러 = 공통.F종목별_일일가격정보_모음(종목)
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_3() : common.F종목별_일일가격정보_모음() 에러.", 에러)
	}

	초기_수량 := len(초기_일일가격정보_모음.G슬라이스())
	if 초기_수량 == 0 {
		테스트.Error("TestF종목별_일일가격정보_확보_3() : 초기 데이터 설정할 수 없습니다. 추가 확인이 필요함.")
	}

	샘플_데이터_일자 := 종료일.AddDate(0, 0, -1)
	샘플_데이터 := 초기_일일가격정보_모음.G일일가격정보(샘플_데이터_일자)

	반복횟수 := 0
	for 샘플_데이터 == nil {
		샘플_데이터_일자 = 샘플_데이터_일자.AddDate(0, 0, -1)
		샘플_데이터 = 초기_일일가격정보_모음.G일일가격정보(샘플_데이터_일자)
		반복횟수++

		if 반복횟수 > 10000 {
			테스트.Error("TestF종목별_일일가격정보_확보_3() : 적절한 샘플 데이터 일자를 찾을 수 없습니다.")
		}
	}

	샘플_데이터_초기_조정종가 := 샘플_데이터.G조정종가()

	// 조정종가 10% 높이기
	sql := new(bytes.Buffer)
	sql.WriteString("UPDATE ")
	sql.WriteString(공통.F일일가격정보_테이블() + " ")
	sql.WriteString("SET")
	sql.WriteString("	adj_close = adj_close * 1.1")
	sql문 := sql.String()

	_, 에러 = 공통.F_SQL실행(sql문)
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_3() : common.F_SQL실행() 에러.", 에러)
	}

	종목별_일일가격정보_모음, 에러 := 공통.F종목별_일일가격정보_모음(종목)
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_3() : 초기 데이터 조정종가 수정 후 common.F종목별_일일가격정보_모음() 에러.", 에러)
	}

	// 조정종가가 제대로 높아졌는 지 확인.
	샘플_데이터 = 종목별_일일가격정보_모음.G일일가격정보(샘플_데이터_일자)
	샘플_데이터_변경된_조정종가 := 샘플_데이터.G조정종가()
	예상값 := 공통.F반올림_통화(샘플_데이터_초기_조정종가 * 1.1)

	if 샘플_데이터_변경된_조정종가 != 예상값 {
		비율 := 0.0
		if 샘플_데이터_초기_조정종가 != 0 {
			비율 = 샘플_데이터_변경된_조정종가 / 샘플_데이터_초기_조정종가
		}

		테스트.Errorf("TestF종목별_일일가격정보_확보_3() : 초기 데이터의 조정종가가 제대로 수정되지 않았습니다. 예상값 %v, 실제값 %v. 비율 %v.", 예상값, 샘플_데이터_변경된_조정종가, 비율)
	}
	// 여기까지 기존 데이터가 존재하는 상태로 만들었음.

	// 추가 데이터 확보 과정 시작.
	일일가격정보_불러오기_테스트_모드_시작()
	defer 일일가격정보_불러오기_테스트_모드_종료()

	에러 = F종목별_일일가격정보_확보(공통.F종목_동화약품())
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_3() : F종목별_일일가격정보_확보() 에러.", 에러)
	}

	// 시작일, 종료일 확인
	if len(시작일_종료일_기록_저장소) != 2 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_3() : 데이터 액세스 횟수 불일치. 예상값 2, 실제값 %v.", len(시작일_종료일_기록_저장소))
	}

	기록된_시작일 := 시작일_종료일_기록_저장소[0][0]
	if 기록된_시작일.Format("2006-01-02") != "2014-07-14" {
		테스트.Errorf("TestF종목별_일일가격정보_확보_3() : 기록된 시작일 불일치 1. 예상값 2014-07-14, 실제값 %v.", 기록된_시작일.Format("2006-01-02"))
	}

	기록된_종료일 := 시작일_종료일_기록_저장소[0][1]
	if 기록된_종료일.Format("2006-01-02") != time.Now().Format("2006-01-02") {
		테스트.Errorf("TestF종목별_일일가격정보_확보_3() : 기록된 종료일 불일치 1. 예상값 %v, 실제값 %v.", time.Now().Format("2006-01-02"), 기록된_종료일.Format("2006-01-02"))
	}

	기록된_시작일 = 시작일_종료일_기록_저장소[1][0]
	if 기록된_시작일.Format("2006-01-02") != "1900-01-01" {
		테스트.Errorf("TestF종목별_일일가격정보_확보_3() : 기록된 시작일 불일치 2. 예상값 1900-01-01, 실제값 %v.", 기록된_시작일.Format("2006-01-02"))
	}

	예상_종료일 := 종료일.AddDate(0, 0, -1)
	기록된_종료일 = 시작일_종료일_기록_저장소[1][1]
	if 기록된_종료일.Format("2006-01-02") != 예상_종료일.Format("2006-01-02") {
		테스트.Errorf("TestF종목별_일일가격정보_확보_3() : 기록된 종료일 불일치 2. 예상값 %v, 실제값 %v.", 예상_종료일.Format("2006-01-02"), 기록된_종료일.Format("2006-01-02"))
	}

	// 추가로 데이터가 제대로 기록되었는 지 확인.
	종목별_일일가격정보_모음, 에러 = 공통.F종목별_일일가격정보_모음(공통.F종목_동화약품())
	if 에러 != nil {
		테스트.Error("TestF종목별_일일가격정보_확보_3() : 최종 확인과정에서 common.F종목별_일일가격정보_모음() 에러.", 에러)
	}

	기록된_수량 := len(종목별_일일가격정보_모음.G슬라이스())
	if 초기_수량 >= 기록된_수량 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_3() : 데이터가 추가되지 않았습니다. 초기 수량 %v, 추가 후 수량 %v", 초기_수량, 기록된_수량)
	}

	// 기록된 상태 확인.
	샘플_데이터 = 종목별_일일가격정보_모음.G일일가격정보(샘플_데이터_일자)
	샘플_데이터_최종_조정종가 := 샘플_데이터.G조정종가()

	if 샘플_데이터_최종_조정종가 != 샘플_데이터_초기_조정종가 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_3() : 샘플 데이터 조정종가 불일치. 초기값 %v, 최종값 %v.", 샘플_데이터_초기_조정종가, 샘플_데이터_최종_조정종가)
	}

	일자_20140718, _ := 공통.F문자열2일자("2014-07-18")

	일일가격정보 := 종목별_일일가격정보_모음.G일일가격정보(일자_20140718)

	if 일일가격정보 == nil {
		테스트.Error("TestF종목별_일일가격정보_확보_3() : 최종 기록 확인용 일일가격정보가 nil입니다.")

		return
	}

	if 일일가격정보.G일자() != 공통.F일자(일자_20140718) {
		log.Println("체크포인트 25.1 : TestF종목별_일일가격정보_확보_3()")

		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 일자 불일치. 예상값 %v, 실제값 %v", 공통.F일자(일자_20140718), 일일가격정보.G일자())

		log.Println("체크포인트 25.2 : TestF종목별_일일가격정보_확보_3()")
	}

	if 일일가격정보.G시가() != 5470.00 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 시가 불일치. 예상값 5470.0, 실제값 %v", 일일가격정보.G시가())
	}

	if 일일가격정보.G고가() != 5500.00 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 고가 불일치. 예상값 5500.0, 실제값 %v", 일일가격정보.G고가())
	}

	if 일일가격정보.G저가() != 5410.00 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 저가 불일치. 예상값 5410.0, 실제값 %v", 일일가격정보.G저가())
	}

	if 일일가격정보.G종가() != 5440.00 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 종가 불일치. 예상값 5440.0, 실제값 %v", 일일가격정보.G종가())
	}

	if 일일가격정보.G거래량() != 46300 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 거래량 불일치. 예상값 46300, 실제값 %v", 일일가격정보.G거래량())
	}

	if 일일가격정보.G조정종가() != 5440.0 {
		테스트.Errorf("TestF종목별_일일가격정보_확보_2() : 조정종가 불일치. 예상값 5440.0, 실제값 %v", 일일가격정보.G조정종가())
	}
}

func TestF야후_한국_URL문자열_생성(테스트 *testing.T) {
	시작일, _ := time.Parse("2006-01-02", "2000-03-04")
	종료일, _ := time.Parse("2006-01-02", "2010-11-25")
	실제값 := 야후_한국_URL문자열_생성(공통.F종목_동화약품(), 시작일, 종료일)

	url문자열 := new(bytes.Buffer)
	url문자열.WriteString("http://ichart.yahoo.com/table.csv?s=")
	url문자열.WriteString("000020.KS")
	url문자열.WriteString("&a=2&b=4&c=2000")
	url문자열.WriteString("&d=10&e=25&f=2010")
	url문자열.WriteString("&g=d&ignore=.csv")
	예상값 := url문자열.String()

	if 예상값 != 실제값 {
		log.Println(예상값)
		log.Println(실제값)

		테스트.Errorf("tools.TestF야후_한국_URL문자열_생성() : 불일치. 예상값 : %v, 실제값 : %v", 예상값, 실제값)
	}
}

func TestF야후_연월일_문자열(테스트 *testing.T) {
	일자, _ := time.Parse("2006-01-02", "2013-11-01")

	연도, 월, 일 := 야후_연월일_문자열(일자)

	if 연도 != "2013" {
		테스트.Errorf("tools.TestF야후_연월일_문자열() : 연도 문자열 불일치. 예상값 2013, 실제값 %v.", 연도)
	}

	if 월 != "10" {
		테스트.Errorf("tools.TestF야후_연월일_문자열() : 월 문자열 불일치. 예상값 10, 실제값 %v.", 월)
	}

	if 일 != "1" {
		테스트.Errorf("tools.TestF야후_연월일_문자열() : 일 문자열 불일치. 예상값 01, 실제값 %v.", 일)
	}
}

func TestF종목별_일일가격정보_모음_생성_도우미(테스트 *testing.T) {
	시작일, 에러 := 공통.F문자열2일자("2014-07-17")
	종료일, 에러 := 공통.F문자열2일자("2014-07-19")

	일일가격정보_문자열_모음, 에러 := 테스트용_문자열_슬라이스_불러오기(공통.F종목_동화약품(), 시작일, 종료일)
	if 에러 != nil {
		테스트.Error("tools.TestF테스트용_데이터_불러오기() : 테스트용_문자열_슬라이스_불러오기() 에러.", 에러)
	}

	일일가격정보_모음, 에러 := 종목별_일일가격정보_모음_생성_도우미(공통.F종목_동화약품(), 일일가격정보_문자열_모음)

	일자_20140718, 에러 := 공통.F문자열2일자("2014-07-18")

	일일가격정보 := 일일가격정보_모음.G일일가격정보(일자_20140718)

	if 일일가격정보.G일자() != 공통.F일자(일자_20140718) {
		테스트.Errorf("tools.TestF종목별_일일가격정보_모음_생성_도우미() : 일자 불일치. 예상값 %v, 실제값 %v", 공통.F일자(일자_20140718), 일일가격정보.G일자())
	}

	if 일일가격정보.G시가() != 5470.00 {
		테스트.Errorf("tools.TestF종목별_일일가격정보_모음_생성_도우미() : 시가 불일치. 예상값 5470.0, 실제값 %v", 일일가격정보.G시가())
	}

	if 일일가격정보.G고가() != 5500.00 {
		테스트.Errorf("tools.TestF종목별_일일가격정보_모음_생성_도우미() : 고가 불일치. 예상값 5500.0, 실제값 %v", 일일가격정보.G고가())
	}

	if 일일가격정보.G저가() != 5410.00 {
		테스트.Errorf("tools.TestF종목별_일일가격정보_모음_생성_도우미() : 저가 불일치. 예상값 5410.0, 실제값 %v", 일일가격정보.G저가())
	}

	if 일일가격정보.G종가() != 5440.00 {
		테스트.Errorf("tools.TestF종목별_일일가격정보_모음_생성_도우미() : 종가 불일치. 예상값 5440.0, 실제값 %v", 일일가격정보.G종가())
	}

	if 일일가격정보.G거래량() != 46300 {
		테스트.Errorf("tools.TestF종목별_일일가격정보_모음_생성_도우미() : 거래량 불일치. 예상값 46300, 실제값 %v", 일일가격정보.G거래량())
	}

	if 일일가격정보.G조정종가() != 5440.0 {
		테스트.Errorf("tools.TestF종목별_일일가격정보_모음_생성_도우미() : 조정종가 불일치. 예상값 5440.0, 실제값 %v", 일일가격정보.G조정종가())
	}
}

func TestF테스트용_문자열_슬라이스_불러오기(테스트 *testing.T) {
	시작일, _ := 공통.F문자열2일자("2014-07-14")
	종료일, _ := 공통.F문자열2일자("2014-07-14")

	문자열_슬라이스, 에러 := 테스트용_문자열_슬라이스_불러오기(공통.F종목_동화약품(), 시작일, 종료일)
	if 에러 != nil {
		테스트.Error("tools.TestF테스트용_문자열_슬라이스_불러오기() : 테스트용_문자열_슬라이스_불러오기() 에러.", 에러)
	}

	if len(문자열_슬라이스) != 1 {
		테스트.Errorf("tools.TestF테스트용_문자열_슬라이스_불러오기() : 수량 불일치. 예상값 1, 실제값 %v.", len(문자열_슬라이스))
	}

	값_20140714 := 문자열_슬라이스[0]

	예상값 := make([]string, 0)
	예상값 = append(예상값, "2014-07-14")
	예상값 = append(예상값, "5460.00")
	예상값 = append(예상값, "5520.00")
	예상값 = append(예상값, "5400.00")
	예상값 = append(예상값, "5490.00")
	예상값 = append(예상값, "54900")
	예상값 = append(예상값, "5490.00")

	for 인덱스 := 0; 인덱스 < len(값_20140714); 인덱스++ {
		if 값_20140714[인덱스] != 예상값[인덱스] {
			테스트.Errorf("tools.TestF테스트용_문자열_슬라이스_불러오기() : 값 불일치. 인덱스 %v, 예상값 %v, 실제값 %v.", 인덱스, 예상값[인덱스], 값_20140714[인덱스])
		}
	}
}

func TestF테스트용_문자열_슬라이스_전부_불러오기(테스트 *testing.T) {
	일일가격정보_문자열_모음, 에러 := 테스트용_문자열_슬라이스_전부_불러오기()
	if 에러 != nil {
		테스트.Error("tools.TestF테스트용_문자열_슬라이스_전부_불러오기() : 테스트용_문자열_슬라이스_전부_불러오기() 에러.", 에러)
	}

	문자열_모음 := 일일가격정보_문자열_모음[0]

	if 문자열_모음[0] != "2014-07-18" ||
		문자열_모음[1] != "5470.00" ||
		문자열_모음[2] != "5500.00" ||
		문자열_모음[3] != "5410.00" ||
		문자열_모음[4] != "5440.00" ||
		문자열_모음[5] != "46300" ||
		문자열_모음[6] != "5440.00" {
		log.Println("0 : '" + 문자열_모음[0] + "'")
		log.Println("1 : '" + 문자열_모음[1] + "'")
		log.Println("2 : '" + 문자열_모음[2] + "'")
		log.Println("3 : '" + 문자열_모음[3] + "'")
		log.Println("4 : '" + 문자열_모음[4] + "'")
		log.Println("5 : '" + 문자열_모음[5] + "'")
		log.Println("6 : '" + 문자열_모음[6] + "'")
		테스트.Error("tools.TestF테스트용_데이터_불러오기() : 불러온 문자열 모음 내용이 예상과 다릅니다.")
	}
}

var 시작일_종료일_기록하기 bool = false
var 시작일_종료일_기록_저장소 [][]time.Time = nil

func 테스트용_문자열_슬라이스_불러오기(
	종목 *공통.C종목,
	시작일 time.Time,
	종료일 time.Time) ([][]string, error) {

	if 시작일_종료일_기록하기 {
		// 시작일, 종료일 기록. 다른 테스트 케이스에서 사용함.
		행 := make([]time.Time, 0)
		행 = append(행, 시작일)
		행 = append(행, 종료일)

		시작일_종료일_기록_저장소 = append(시작일_종료일_기록_저장소, 행)
	}

	// 여기서부터 실제 기능 시작함.
	전체_문자열_슬라이스, 에러 := 테스트용_문자열_슬라이스_전부_불러오기()
	if 에러 != nil {
		log.Println("tools.테스트용_문자열_슬라이스_불러오기() : 테스트용_문자열_슬라이스_전부_불러오기() 에러.", 에러)

		return nil, 에러
	}

	시작일 = 공통.F일자(시작일)
	종료일 = 공통.F일자(종료일)

	테스트용_문자열_슬라이스 := make([][]string, 0)

	for 인덱스, 문자열_슬라이스 := range 전체_문자열_슬라이스 {
		일자_문자열 := 문자열_슬라이스[0]

		일자, 에러 := 공통.F문자열2일자(일자_문자열)
		if 에러 != nil {
			log.Printf("tools.테스트용_문자열_슬라이스_불러오기() : common.공통.F문자열2일자() 에러. 인덱스 %v, 일자_문자열 %v.", 인덱스, 일자_문자열)
			log.Println(에러)

			return nil, 에러
		}

		if 일자.Before(시작일) || 일자.After(종료일) {
			continue
		}

		테스트용_문자열_슬라이스 = append(테스트용_문자열_슬라이스, 문자열_슬라이스)
	}

	return 테스트용_문자열_슬라이스, nil
}

var 일일가격정보_JSON데이터_파일이름 string = "/test_data/yahoo_daily_price_data_korea_json_data_for_test"

func 테스트용_문자열_슬라이스_전부_불러오기() ([][]string, error) {
	파일경로, 에러 := 공통.F파일경로로_파일찾기(일일가격정보_JSON데이터_파일이름)
	if 에러 != nil {
		log.Println("tools.테스트용_문자열_슬라이스_전부_불러오기() : 공통.F파일경로로_파일찾기() 에러.")
		log.Println(에러)

		return nil, 에러
	}

	json데이터, 에러 := ioutil.ReadFile(파일경로)
	if 에러 != nil {
		log.Println("tools.테스트용_문자열_슬라이스_전부_불러오기() : ioutil.ReadFile() 에러 발생.", 에러)
		return nil, 에러
	}

	var 일일가격정보_문자열_모음 [][]string
	에러 = json.Unmarshal(json데이터, &일일가격정보_문자열_모음)
	if 에러 != nil {
		log.Println("tools.테스트용_문자열_슬라이스_전부_불러오기() : json.Unmarshal() 에러 발생.", 에러)
		return nil, 에러
	}

	return 일일가격정보_문자열_모음, nil
}

func 테스트_데이터_확보(테스트 *testing.T) {
	종목 := 공통.F종목_동화약품()
	시작일, _ := 공통.F문자열2일자("1900-01-01")
	종료일 := time.Now()

	일일가격정보_문자열_모음, 에러 := 일일가격정보_불러오기_도우미_야후_한국(종목, 시작일, 종료일)
	if 에러 != nil {
		테스트.Error("tools.테스트_데이터_확보() : 일일가격정보_불러오기_도우미_야후_한국() 에러 발생.")
	}

	json바이트_데이타, 에러 := json.Marshal(일일가격정보_문자열_모음)
	if 에러 != nil {
		테스트.Error("tools.테스트_데이터_확보() :json.Marshal() 에러 발생.")
	}

	에러 = ioutil.WriteFile(일일가격정보_JSON데이터_파일이름, json바이트_데이타, 0777)
	if 에러 != nil {
		테스트.Error("tools.테스트_데이터_확보() : ioutil.WriteFile() 에러 발생.")
	}
}
