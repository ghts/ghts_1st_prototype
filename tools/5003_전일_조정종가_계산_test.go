package tools

import (
	"log"
	공통 "pts/common"
	"testing"
)

func TestF전종목_전일_조정종가_맵(테스트 *testing.T) {
	공통.F일일가격정보_테스트용_테이블_준비()
	defer 공통.F일일가격정보_테스트용_테이블_정리()

	전일_조정종가_맵, 에러 := F전종목_전일_조정종가_맵()
	if 에러 != nil {
		테스트.Error("tools.TestF전종목_전일_조정종가_맵() : tools.F전종목_전일_조정종가_맵() 에러.", 에러)
	}

	일일가격정보_모음_1, 에러 := 공통.F종목별_일일가격정보_모음(공통.F종목_동화약품())
	if 에러 != nil {
		테스트.Error("tools.TestF전종목_전일_조정종가_맵() : common.F종목별_일일가격정보_모음(동화약품) 에러.", 에러)
	}

	일일가격정보_모음_2, 에러 := 공통.F종목별_일일가격정보_모음(공통.F종목_삼성전자())
	if 에러 != nil {
		테스트.Error("tools.TestF전종목_전일_조정종가_맵() : common.F종목별_일일가격정보_모음(삼성전자) 에러.", 에러)
	}

	일일가격정보_모음_맵 := new(공통.S일일가격정보_모음_맵)
	일일가격정보_모음_맵.S추가(일일가격정보_모음_1.G슬라이스())
	일일가격정보_모음_맵.S추가(일일가격정보_모음_2.G슬라이스())

	일일가격정보_슬라이스 := 일일가격정보_모음_맵.G슬라이스()

	for _, 일일가격정보 := range 일일가격정보_슬라이스 {
		if 일일가격정보.G종목().G종목코드() == 공통.F종목_동화약품().G종목코드() {
			if 일일가격정보.G일자().Equal(공통.F일일시세_동화약품_20131101().G일자()) {
				if 전일_조정종가_맵[일일가격정보.G식별코드()] != 0.0 {
					테스트.Errorf("tools.TestF전종목_전일_조정종가_계산() : 키 %v, 예상값 0.0, 실제값 %v.", 일일가격정보.G키(), 전일_조정종가_맵[일일가격정보.G식별코드()])
				}
			} else if 일일가격정보.G일자().Equal(공통.F일일시세_동화약품_20140312().G일자()) {
				if 전일_조정종가_맵[일일가격정보.G식별코드()] != 5516.52 {
					테스트.Errorf("tools.TestF전종목_전일_조정종가_계산() : 키 %v, 예상값 5590.0, 실제값 %v", 일일가격정보.G키(), 전일_조정종가_맵[일일가격정보.G식별코드()])
				}
			} else if 일일가격정보.G일자().Equal(공통.F일일시세_동화약품_20140313().G일자()) {
				if 전일_조정종가_맵[일일가격정보.G식별코드()] != 5650.0 {
					테스트.Errorf("tools.TestF전종목_전일_조정종가_계산() : 키 %v, 예상값 5650.0, 실제값 %v", 일일가격정보.G키(), 전일_조정종가_맵[일일가격정보.G식별코드()])
				}
			} else {
				log.Println("tools.TestF전종목_전일_조정종가_계산() : 테스트에서 에러가 발생하다가 말다가 하는 부분 1.")
				디버깅용_로깅(일일가격정보, 일일가격정보_슬라이스, 일일가격정보_모음_1, 일일가격정보_모음_2)
				테스트.Errorf("tools.TestF전종목_전일_조정종가_계산() : 예상치 못한 경우. 종목 %v, 키 : %v", 일일가격정보.G종목().G종목명칭, 일일가격정보.G키())
				return // 디버깅
			}
		} else if 일일가격정보.G종목().G종목코드() == 공통.F종목_삼성전자().G종목코드() {
			if 일일가격정보.G일자().Equal(공통.F일일시세_삼성전자_20140425().G일자()) {
				if 전일_조정종가_맵[일일가격정보.G식별코드()] != 0.0 {
					테스트.Errorf("tools.TestF전종목_전일_조정종가_계산() : 키 %v, 예상값 0.0, 실제값 %v", 일일가격정보.G키(), 전일_조정종가_맵[일일가격정보.G식별코드()])
				}
			} else if 일일가격정보.G일자().Equal(공통.F일일시세_삼성전자_20140708().G일자()) {
				if 전일_조정종가_맵[일일가격정보.G식별코드()] != 1399000.0 {
					테스트.Errorf("tools.TestF전종목_전일_조정종가_계산() : 키 %v, 예상값 1399000.0, 실제값 %v", 일일가격정보.G키(), 전일_조정종가_맵[일일가격정보.G식별코드()])
				}
			} else if 일일가격정보.G일자().Equal(공통.F일일시세_삼성전자_20140709().G일자()) {
				if 전일_조정종가_맵[일일가격정보.G식별코드()] != 1295000.0 {
					테스트.Errorf("tools.TestF전종목_전일_조정종가_계산() : 키 %v, 예상값 1295000.0, 실제값 %v", 일일가격정보.G키(), 전일_조정종가_맵[일일가격정보.G식별코드()])
				}
			} else {
				log.Println("tools.TestF전종목_전일_조정종가_계산() : 테스트에서 에러가 발생하다가 말다가 하는 부분 1.")
				디버깅용_로깅(일일가격정보, 일일가격정보_슬라이스, 일일가격정보_모음_1, 일일가격정보_모음_2)
				테스트.Errorf("tools.TestF전종목_전일_조정종가_계산() : 예상치 못한 경우. 종목 %v, 키 : %v", 일일가격정보.G종목().G종목명칭, 일일가격정보.G키())
				return // 디버깅
			}
		} else {
			테스트.Errorf("tools.TestF전종목_전일_조정종가_계산() : 예상치 못한 경우. 종목 %v, 키 : %v", 일일가격정보.G종목().G종목명칭, 일일가격정보.G키())
		}
	}
}

func TestF종목별_전일_조정종가_맵(테스트 *testing.T) {
	공통.F일일가격정보_테스트용_테이블_준비()
	defer 공통.F일일가격정보_테스트용_테이블_정리()

	전일_조정종가_맵, 에러 := F종목별_전일_조정종가_맵(공통.F종목_동화약품())
	if 에러 != nil {
		테스트.Error("tools.TestF종목별_전일_조정종가_맵() : tools.F종목별_전일_조정종가() 에러.", 에러)
	}

	일일가격정보_모음, 에러 := 공통.F종목별_일일가격정보_모음(공통.F종목_동화약품())
	if 에러 != nil {
		테스트.Error("tools.TestF종목별_전일_조정종가_계산() : common.F종목별_일일가격정보_모음() 에러.", 에러)
	}

	일일가격정보_슬라이스 := 일일가격정보_모음.G슬라이스()

	for _, 일일가격정보 := range 일일가격정보_슬라이스 {
		if 일일가격정보.G일자().Equal(공통.F일일시세_동화약품_20131101().G일자()) {
			if 전일_조정종가_맵[일일가격정보.G식별코드()] != 0.0 {
				테스트.Errorf("tools.TestF종목별_전일_조정종가_계산() : 키 %v, 예상값 0.0, 실제값 %v", 일일가격정보.G키(), 전일_조정종가_맵[일일가격정보.G식별코드()])
			}
		} else if 일일가격정보.G일자().Equal(공통.F일일시세_동화약품_20140312().G일자()) {
			if 전일_조정종가_맵[일일가격정보.G식별코드()] != 5516.52 {
				테스트.Errorf("tools.TestF종목별_전일_조정종가_계산() : 키 %v, 예상값 5516.52, 실제값 %v", 일일가격정보.G키(), 전일_조정종가_맵[일일가격정보.G식별코드()])
			}
		} else if 일일가격정보.G일자().Equal(공통.F일일시세_동화약품_20140313().G일자()) {
			if 전일_조정종가_맵[일일가격정보.G식별코드()] != 5650.0 {
				테스트.Errorf("tools.TestF종목별_전일_조정종가_계산() : 키 %v, 예상값 5650.0, 실제값 %v", 일일가격정보.G키(), 전일_조정종가_맵[일일가격정보.G식별코드()])
			}
		} else {
			log.Println("tools.TestF종목별_전일_조정종가_계산() : 테스트에서 에러가 발생하다가 말다가 하는 부분 1.")
			디버깅용_로깅(일일가격정보, 일일가격정보_슬라이스, 일일가격정보_모음, 일일가격정보_모음)
			테스트.Errorf("tools.TestF종목별_전일_조정종가_계산() : 예상치 못한 경우. 종목 %v, 키 : %v", 일일가격정보.G종목().G종목명칭, 일일가격정보.G키())
			return // 디버깅
		}
	}
}

func 디버깅용_로깅(일일가격정보 *공통.C일일가격정보,
	일일가격정보_슬라이스 []*공통.C일일가격정보,
	일일가격정보_모음_1 *공통.S종목별_일일가격정보_모음,
	일일가격정보_모음_2 *공통.S종목별_일일가격정보_모음) {
	log.Println("현재까지 조사한 바로는 문제의 원인은 공통.F종목별_일일가격정보_모음() 에 있는 듯 함.")
	log.Println("DB서버에 문제가 없다고 가정할 경우, 문제의 원인은 속도를 높이기 위한 로컬 캐쉬에 있는 듯 함.")

	종목정보_맵, 에러 := 공통.F종목정보_맵()
	if 에러 != nil {
		log.Println("5003 디버깅용_로깅() : F종목정보_맵() 에러.", 에러)
	}

	// 에러난 항목 표시
	log.Println(공통.F종목정보_테이블(), 공통.F일일가격정보_테이블())
	log.Println("")
	log.Println("에러난 항목")
	/*
		종목정보 := 일일가격정보.G종목()
		log.Printf("종목 : 식별코드 %v, 종목코드 %v, 종목코드2 %v, " +
							"종목명칭 %v, 종목명칭2 %v, 발행기관 %v, 시장구분 %v",
							종목정보.G식별코드(), 종목정보.G종목코드(), 종목정보.G종목코드2(),
							종목정보.G종목명칭(), 종목정보.G종목명칭2(), 종목정보.G발행기관코드(), 종목정보.G시장구분())
		log.Println("") */
	오류난_일일가격정보_식별코드 := 일일가격정보.G식별코드()
	log.Printf("식별코드 %v, 키 %v, 종목코드  %v, 일자  %v, "+
		"시가 %v, 고가 %v, 저가 %v, 종가 %v, 거래량 %v",
		일일가격정보.G식별코드(), 일일가격정보.G키(), 일일가격정보.G종목().G종목코드(), 일일가격정보.G일자(),
		일일가격정보.G시가(), 일일가격정보.G고가(), 일일가격정보.G저가, 일일가격정보.G종가(), 일일가격정보.G거래량())

	log.Println("")
	log.Println("")

	// 에러 당시의 일일가격정보 상태 표시
	/* log.Println("에러 당시의 일일가격정보_모음_맵 내용")
	for 인덱스, 일일가격정보 := range 일일가격정보_슬라이스 {
		log.Printf("인덱스 %v, 식별코드 %v, 키 %v, 종목코드  %v, 일자  %v, " +
					"시가 %v, 고가 %v, 저가 %v, 종가 %v, 거래량 %v",
					인덱스, 일일가격정보.G식별코드(), 일일가격정보.G키(), 일일가격정보.G종목().G종목코드(), 일일가격정보.G일자(),
					일일가격정보.G시가(), 일일가격정보.G고가(), 일일가격정보.G저가, 일일가격정보.G종가(), 일일가격정보.G거래량())
	}
	log.Println("") */

	log.Println("에러 당시의 일일가격정보 내용")
	일일가격정보_슬라이스 = append(일일가격정보_모음_1.G슬라이스(), 일일가격정보_모음_2.G슬라이스()...)
	for 인덱스, 일일가격정보 := range 일일가격정보_슬라이스 {
		if 오류난_일일가격정보_식별코드 == 일일가격정보.G식별코드() {

			log.Printf("인덱스 %v, 식별코드 %v, 키 %v, 종목코드  %v, 일자  %v, "+
				"시가 %v, 고가 %v, 저가 %v, 종가 %v, 거래량 %v",
				인덱스, 일일가격정보.G식별코드(), 일일가격정보.G키(), 일일가격정보.G종목().G종목코드(), 일일가격정보.G일자(),
				일일가격정보.G시가(), 일일가격정보.G고가(), 일일가격정보.G저가, 일일가격정보.G종가(), 일일가격정보.G거래량())
		}
	}
	log.Println("")

	// DB를 불러들인 내용 표시
	log.Println("DB를 다시 불러들인 내용")
	for _, 종목정보 := range 종목정보_맵 {
		일일가격정보_모음, 에러 := 공통.F종목별_일일가격정보_모음(종목정보)
		if 에러 != nil {
			log.Println("5003 디버깅용_로깅() : F종목별_일일가격정보_모음() 에러.", 에러)
		}

		일일가격정보_슬라이스 := 일일가격정보_모음.G슬라이스()

		for 인덱스, 일일가격정보 := range 일일가격정보_슬라이스 {
			if 오류난_일일가격정보_식별코드 == 일일가격정보.G식별코드() {
				log.Printf("인덱스 %v, 식별코드 %v, 키 %v, 종목코드  %v, 일자  %v, "+
					"시가 %v, 고가 %v, 저가 %v, 종가 %v, 거래량 %v",
					인덱스, 일일가격정보.G식별코드(), 일일가격정보.G키(), 일일가격정보.G종목().G종목코드(), 일일가격정보.G일자(),
					일일가격정보.G시가(), 일일가격정보.G고가(), 일일가격정보.G저가, 일일가격정보.G종가(), 일일가격정보.G거래량())
			}
		}
	}

	log.Println("")
	log.Println("")
}
