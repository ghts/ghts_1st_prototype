package tools

import (
	"bytes"
	"log"
	공통 "pts/common"
)

// *********************************************
// 기본 아이디어
//
// 1. KRX에서 가격변동은 전일_조정종가에서 상하 15%로 제한된다.
// 2. 다른 아이디어가 있는 지 생각해 볼 것.
// *********************************************

func F전종목_일일가격정보_체크_한국() (*공통.S식별코드별_에러내역_맵, error) {
	F무효한_일일가격정보_제거()

	종목정보_맵, 에러 := 공통.F종목정보_맵()
	if 에러 != nil {
		log.Println("tools.F전종목_일일가격정보_체크_한국() : 공통.F종목정보_맵() 에러.", 에러)

		return nil, 에러
	}

	전종목_에러내역_맵 := new(공통.S식별코드별_에러내역_맵)

	for _, 종목 := range 종목정보_맵 {
		종목별_에러내역_맵, 에러 := F종목별_일일가격정보_체크_한국(종목)
		if 에러 != nil {
			log.Printf("tools.F전종목_일일가격정보_체크_한국() : F일일가격정보_체크_한국() 에러. 종목코드 %v", 종목.G종목코드())
			log.Println(에러)

			return nil, 에러
		}

		if 종목별_에러내역_맵 != nil {
			종목별_에러내역_맵_내용 := 종목별_에러내역_맵.G맵()
			for 키, 에러내역_슬라이스 := range 종목별_에러내역_맵_내용 {
				for _, 에러내역 := range 에러내역_슬라이스 {
					전종목_에러내역_맵.S에러내역_추가(키, 에러내역)
				}
			}
		}
	}

	if !공통.F테스트_모드() {
		전종목_에러내역_맵.F에러내역_출력()
	}

	return 전종목_에러내역_맵, nil
}

func F무효한_일일가격정보_제거() error {
	sql := new(bytes.Buffer)
	sql.WriteString("DELETE FROM " + 공통.F일일가격정보_테이블() + " ")
	sql.WriteString("WHERE open <= 0.0")
	sql.WriteString("	OR high <= 0.0")
	sql.WriteString("	OR low <= 0.0")
	sql.WriteString("	OR close <= 0.0")

	_, 에러 := 공통.F_SQL실행(sql.String())
	if 에러 != nil {
		log.Println("tools.F무효한_일일가격정보_제거() : common.F_SQL실행() 에러.", 에러)

		return 에러
	}

	return nil
}

func F종목별_일일가격정보_체크_한국(종목 *공통.C종목) (*공통.S식별코드별_에러내역_맵, error) {
	전일_조정종가_대비_에러내역_맵, 에러 := 전일_조정종가_대비_상하_15퍼센트_이내(종목)
	if 에러 != nil {
		log.Println("tools.F종목별_일일가격정보_체크_한국() : 전일_조정종가_대비_상하_15퍼센트_이내() 에러.", 에러)

		return nil, 에러
	}

	// 현재로서는 전일_조정종가 대비 15% 변동폭만 점검한다.
	return 전일_조정종가_대비_에러내역_맵, nil
}

func 전일_조정종가_대비_상하_15퍼센트_이내(종목 *공통.C종목) (*공통.S식별코드별_에러내역_맵, error) {
	일일가격정보_모음, 에러 := 공통.F종목별_일일가격정보_모음(종목)
	if 에러 != nil {
		log.Printf("tools.전일_조정종가_대비_상하_15퍼센트_이내("+종목.G종목코드()+") : common.F종목별_일일가격정보_모음() 에러.", 에러)

		return nil, 에러
	}

	전일_조정종가_맵, 에러 := F종목별_전일_조정종가_맵(종목)
	if 에러 != nil {
		log.Printf("tools.전일_조정종가_대비_상하_15퍼센트_이내("+종목.G종목코드()+") : tools.F종목별_전일_조정종가() 에러.", 에러)

		return nil, 에러
	}

	일일가격정보_슬라이스 := 일일가격정보_모음.G슬라이스()

	에러내역_맵 := new(공통.S식별코드별_에러내역_맵)

	for 인덱스, 일일가격정보 := range 일일가격정보_슬라이스 {
		if 인덱스 == 0 {
			continue
		} // 첫번째 가격정보에는 전일_조정종가가 존재할 수 없음.

		전일_조정종가, 존재함 := 전일_조정종가_맵[일일가격정보.G식별코드()]

		if !존재함 {
			log.Printf("tools.전일_조정종가_대비_상하_15퍼센트_이내(%v) : "+
				"전일_조정종가가 존재하지 않습니다. 식별코드 : %v",
				종목.G종목코드(), 일일가격정보.G식별코드())

			에러내역 := 공통.F에러내역_생성("전일_조정종가 없음", "전일_조정종가가 존재하지 않습니다.")
			에러내역_맵.S에러내역_추가(일일가격정보.G식별코드(), 에러내역)

			continue
		}

		if 전일_조정종가 < 0.0000001 { // 사실상 0이라는 의미임.
			log.Println("TODO : 각 종목별 초반에 전일_조정종가가 없는 경우를 어떻게 처리할 것인지 생각해 볼 것.")

			log.Printf("tools.전일_조정종가_대비_상하_15퍼센트_이내(%v) : "+
				"전일_조정종가가 1원보다 작습니다. "+
				"식별코드 : %v, 전일_조정종가 : %v",
				종목.G종목코드(), 일일가격정보.G식별코드(), 전일_조정종가)

			에러내역 := 공통.F에러내역_생성("전일_조정종가 비정상", "전일_조정종가가 1원보다 작습니다.")
			에러내역_맵.S에러내역_추가(일일가격정보.G식별코드(), 에러내역)

			continue
		}

		if !전일_조정종가_대비_상하_15퍼센트_이내_도우미(전일_조정종가, 일일가격정보.G조정시가()) {
			에러내역 := 공통.F에러내역_생성(
				"가격정보 오류",
				"시가가 전일_조정종가 대비 15%를 벗어납니다. "+
					"전일_조정종가 : "+공통.F실수64to문자열(전일_조정종가)+", "+
					"조정시가 : "+공통.F실수64to문자열(일일가격정보.G조정시가()))
			에러내역_맵.S에러내역_추가(일일가격정보.G식별코드(), 에러내역)

			if !공통.F테스트_모드() {
				log.Printf("tools.전일_조정종가_대비_상하_15퍼센트_이내(%v) : "+
					"'조정시가'가 '전일_조정종가'에서 15%%를 벗어납니다. "+
					"식별코드 : %v, 전일_조정종가 : %v, 조정시가 : %v.",
					종목.G종목코드(), 일일가격정보.G식별코드(), 전일_조정종가, 일일가격정보.G조정시가())
			}
		}

		if !전일_조정종가_대비_상하_15퍼센트_이내_도우미(전일_조정종가, 일일가격정보.G조정고가()) {
			에러내역 := 공통.F에러내역_생성(
				"가격정보 오류",
				"고가가 전일_조정종가 대비 15%를 벗어납니다. "+
					"전일_조정종가 : "+공통.F실수64to문자열(전일_조정종가)+", "+
					"조정고가 : "+공통.F실수64to문자열(일일가격정보.G조정고가()))
			에러내역_맵.S에러내역_추가(일일가격정보.G식별코드(), 에러내역)

			if !공통.F테스트_모드() {
				log.Printf("tools.전일_조정종가_대비_상하_15퍼센트_이내(%v) : "+
					"고가가 전일_조정종가에서 15%%를 벗어납니다. "+
					"식별코드 : %v, 전일_조정종가 : %v, 조정고가 : %v.",
					종목.G종목코드(), 일일가격정보.G식별코드(), 전일_조정종가, 일일가격정보.G조정고가())
			}
		}

		if !전일_조정종가_대비_상하_15퍼센트_이내_도우미(전일_조정종가, 일일가격정보.G조정저가()) {
			에러내역 := 공통.F에러내역_생성(
				"가격정보 오류",
				"저가가 전일_조정종가 대비 15%를 벗어납니다. "+
					"전일_조정종가 : "+공통.F실수64to문자열(전일_조정종가)+", "+
					"조정저가 : "+공통.F실수64to문자열(일일가격정보.G조정저가()))
			에러내역_맵.S에러내역_추가(일일가격정보.G식별코드(), 에러내역)

			if !공통.F테스트_모드() {
				log.Printf("tools.전일_조정종가_대비_상하_15퍼센트_이내(%v) : "+
					"저가가 전일_조정종가에서 15%%를 벗어납니다. "+
					"식별코드 : %v, 전일_조정종가 : %v, 조정저가 : %v.",
					종목.G종목코드(), 일일가격정보.G식별코드(), 전일_조정종가, 일일가격정보.G조정저가())
			}
		}

		if !전일_조정종가_대비_상하_15퍼센트_이내_도우미(전일_조정종가, 일일가격정보.G조정종가()) {
			에러내역 := 공통.F에러내역_생성(
				"가격정보 오류",
				"종가가 전일_조정종가 대비 15%를 벗어납니다. "+
					"전일_조정종가 : "+공통.F실수64to문자열(전일_조정종가)+", "+
					"조정종가 : "+공통.F실수64to문자열(일일가격정보.G조정종가()))
			에러내역_맵.S에러내역_추가(일일가격정보.G식별코드(), 에러내역)

			if !공통.F테스트_모드() {
				log.Printf("tools.전일_조정종가_대비_상하_15퍼센트_이내(%v) : "+
					"종가가 전일_조정종가에서 15%%를 벗어납니다. "+
					"식별코드 : %v, 전일_조정종가 : %v, 조정종가 : %v.",
					종목.G종목코드(), 일일가격정보.G식별코드(), 전일_조정종가, 일일가격정보.G조정종가())
			}
		}
	}

	return 에러내역_맵, nil
}

func 전일_조정종가_대비_상하_15퍼센트_이내_도우미(전일_조정종가 float64, 가격 float64) bool {
	if 가격 < 전일_조정종가*0.85 ||
		가격 > 전일_조정종가*1.15 {
		return false
	}

	return true
}
