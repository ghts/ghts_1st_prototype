package tools

import (
	"bytes"
	공통 "pts/common"
	"testing"
	"time"
)

// *********************************************
// 기본 아이디어
//
// 1. KRX에서 가격변동은 전일종가에서 상하 15%로 제한된다.
// 2. 다른 아이디어가 있는 지 생각해 볼 것.
// *********************************************

func TestF전종목_일일가격정보_체크_한국(테스트 *testing.T) {
	공통.F일일가격정보_테스트용_테이블_준비()
	defer 공통.F일일가격정보_테스트용_테이블_정리()

	// 오류나는 데이터 추가
	일자, _ := time.Parse("2006-01-02", "2014-03-14")
	일일가격정보 := new(공통.S일일가격정보)
	일일가격정보.S식별코드(4)
	일일가격정보.S종목(공통.F종목_동화약품())
	일일가격정보.S일자(일자)
	일일가격정보.S시가(565)
	일일가격정보.S고가(589)
	일일가격정보.S저가(558)
	일일가격정보.S종가(586)
	일일가격정보.S조정종가(586)
	일일가격정보.S거래량(218100)
	일일가격정보.M조정가격_재계산()

	DB기록용_일일가격정보_모음 := new(공통.S종목별_일일가격정보_모음)
	DB기록용_일일가격정보_모음.S종목(공통.F종목_동화약품())
	DB기록용_일일가격정보_모음.S단일내용_추가(일일가격정보.G상수형_구조체())

	에러 := 공통.F일일가격정보_모음_DB기록(DB기록용_일일가격정보_모음)
	if 에러 != nil {
		테스트.Error("tools.TestF전종목_일일가격정보_체크_한국() : 공통.F일일가격정보_모음_DB기록() 에러. 동화약품 ", 에러)
	}

	일자, _ = time.Parse("2006-01-02", "2014-07-10")
	일일가격정보 = new(공통.S일일가격정보)
	일일가격정보.S식별코드(5)
	일일가격정보.S종목(공통.F종목_삼성전자())
	일일가격정보.S일자(일자)
	일일가격정보.S시가(1287000.00)
	일일가격정보.S고가(13080.00)
	일일가격정보.S저가(12830.00)
	일일가격정보.S종가(13080.00)
	일일가격정보.S조정종가(13080.00)
	일일가격정보.S거래량(236500)
	일일가격정보.M조정가격_재계산()

	DB기록용_일일가격정보_모음 = new(공통.S종목별_일일가격정보_모음)
	DB기록용_일일가격정보_모음.S종목(공통.F종목_삼성전자())
	DB기록용_일일가격정보_모음.S단일내용_추가(일일가격정보.G상수형_구조체())

	에러 = 공통.F일일가격정보_모음_DB기록(DB기록용_일일가격정보_모음)
	if 에러 != nil {
		테스트.Error("tools.TestF전종목_일일가격정보_체크_한국() : 공통.F일일가격정보_모음_DB기록() 에러. 삼성전자 ", 에러)
	}

	에러내역_맵, 에러 := F전종목_일일가격정보_체크_한국()
	if 에러 != nil {
		테스트.Error("tools.TestF전종목_일일가격정보_체크_한국() : F전종목_일일가격정보_체크_한국() 에러.", 에러)
	}

	에러내역_맵_내용 := 에러내역_맵.G맵()
	if len(에러내역_맵_내용) != 2 {
		테스트.Errorf("tools.TestF전종목_일일가격정보_체크_한국() : len(에러내역_맵) 불일치. "+
			"예상값 2, 실제값 %v", len(에러내역_맵_내용))
	}

	에러난_식별코드_모음 := make([]uint64, 0)

	for 키, _ := range 에러내역_맵_내용 {
		에러난_식별코드_모음 = append(에러난_식별코드_모음, 키)
	}

	if len(에러난_식별코드_모음) != 2 {
		테스트.Error("tools.TestF전종목_일일가격정보_체크_한국() : len(에러난_식별코드_모음) 불일치."+
			"예상값 2, 실제값 %v", len(에러난_식별코드_모음))
	}

	에러내역_슬라이스_1 := 에러내역_맵.G에러내역_모음(에러난_식별코드_모음[0])
	에러내역_슬라이스_2 := 에러내역_맵.G에러내역_모음(에러난_식별코드_모음[1])

	if 에러내역_슬라이스_1 == nil {
		테스트.Error("tools.TestF전종목_일일가격정보_체크_한국() : '에러내역_슬라이스_1'가 nil입니다.")
	}

	if 에러내역_슬라이스_2 == nil {
		테스트.Error("tools.TestF전종목_일일가격정보_체크_한국() : '에러내역_슬라이스_2'가 nil입니다.")
	}

	if (len(에러내역_슬라이스_1) + len(에러내역_슬라이스_2)) != 7 {
		테스트.Errorf("tools.TestF종목별_일일가격정보_체크_한국() : 에러내역 갯수 불일치. 예상값 7, 실제값 %v.", len(에러내역_슬라이스_1)+len(에러내역_슬라이스_2))
	}

	if !(len(에러내역_슬라이스_1) == 3 && len(에러내역_슬라이스_2) == 4) &&
		!(len(에러내역_슬라이스_1) == 4 && len(에러내역_슬라이스_2) == 3) {
		테스트.Errorf("tools.TestF종목별_일일가격정보_체크_한국() : 에러내역 갯수 불일치. 예상값 3, 4(순서에 무관함), 실제값 %v, %v.", len(에러내역_슬라이스_1), len(에러내역_슬라이스_2))
	}
}

func TestF무효한_일일가격정보_제거(테스트 *testing.T) {
	공통.F일일가격정보_테스트용_테이블_준비()
	defer 공통.F일일가격정보_테스트용_테이블_정리()

	일일가격정보_모음, 에러 := 공통.F종목별_일일가격정보_모음(공통.F종목_동화약품())
	if 에러 != nil {
		테스트.Error("tools.TestF무효한_일일가격정보_제거() : 원래 수량 확인 중 common.F종목별_일일가격정보_모음() 에러.", 에러)
	}

	원래_수량 := len(일일가격정보_모음.G슬라이스())

	일일가격정보 := 일일가격정보_모음.G일일가격정보(공통.F일일시세_동화약품_20131101().G일자())
	테스트_식별코드 := 일일가격정보.G식별코드()

	// 무효한 데이터 생성.
	sql := new(bytes.Buffer)
	sql.WriteString("UPDATE ")
	sql.WriteString(공통.F일일가격정보_테이블() + " ")
	sql.WriteString("SET")
	sql.WriteString("	open = 0 ")
	sql.WriteString("WHERE")
	sql.WriteString("	id = ?")

	_, 에러 = 공통.F_SQL실행(sql.String(), 테스트_식별코드)
	if 에러 != nil {
		테스트.Error("tools.TestF무효한_일일가격정보_제거() : common.F_SQL실행() 에러.", 에러)
	}

	에러 = F무효한_일일가격정보_제거()
	if 에러 != nil {
		테스트.Error("tools.TestF무효한_일일가격정보_제거() : F무효한_일일가격정보_제거() 에러.", 에러)
	}

	일일가격정보_모음, 에러 = 공통.F종목별_일일가격정보_모음(공통.F종목_동화약품())
	if 에러 != nil {
		테스트.Error("tools.TestF무효한_일일가격정보_제거() : 변경 후 수량 확인 중 common.F종목별_일일가격정보_모음() 에러.", 에러)
	}

	변경_후_수량 := len(일일가격정보_모음.G슬라이스())

	if 변경_후_수량 != (원래_수량 - 1) {
		테스트.Errorf("tools.TestF무효한_일일가격정보_제거() : 수량 불일치. 예상값 %v, 실제값 %v.", 원래_수량-1, 변경_후_수량)
	}
}

func TestF종목별_일일가격정보_체크_한국(테스트 *testing.T) {
	공통.F일일가격정보_테스트용_테이블_준비()
	defer 공통.F일일가격정보_테스트용_테이블_정리()

	// 오류나는 데이터 추가
	일자, _ := time.Parse("2006-01-02", "2014-03-14")
	일일가격정보 := new(공통.S일일가격정보)
	일일가격정보.S식별코드(4)
	일일가격정보.S종목(공통.F종목_동화약품())
	일일가격정보.S일자(일자)
	일일가격정보.S시가(565)
	일일가격정보.S고가(589)
	일일가격정보.S저가(558)
	일일가격정보.S종가(586)
	일일가격정보.S조정종가(586)
	일일가격정보.S거래량(218100)
	일일가격정보.M조정가격_재계산()

	DB기록용_일일가격정보_모음 := new(공통.S종목별_일일가격정보_모음)
	DB기록용_일일가격정보_모음.S종목(공통.F종목_동화약품())
	DB기록용_일일가격정보_모음.S단일내용_추가(일일가격정보.G상수형_구조체())

	에러 := 공통.F일일가격정보_모음_DB기록(DB기록용_일일가격정보_모음)
	if 에러 != nil {
		테스트.Error("tools.TestF종목별_일일가격정보_체크_한국() : 공통.F일일가격정보_모음_DB기록() 에러.", 에러)
	}

	에러내역_맵, 에러 := F종목별_일일가격정보_체크_한국(공통.F종목_동화약품())
	if 에러 != nil {
		테스트.Error("tools.TestF종목별_일일가격정보_체크_한국() : F종목별_일일가격정보_체크_한국() 에러.", 에러)
	}

	에러내역_맵_내용 := 에러내역_맵.G맵()
	if len(에러내역_맵_내용) != 1 {
		테스트.Errorf("tools.TestF종목별_일일가격정보_체크_한국() : len(에러내역_맵) 불일치. 예상값 1, 실제값 %v. "+
			"테스트 실행 시 에러가 났다가 안 났다가 하는 부분 1",
			len(에러내역_맵_내용))
	}

	var 에러난_식별코드 uint64 = 0

	for 키, _ := range 에러내역_맵_내용 {
		에러난_식별코드 = 키
	}

	if 에러난_식별코드 == 0 {
		테스트.Error("tools.TestF종목별_일일가격정보_체크_한국() : '에러난_식별코드'를 찾지 못했습니다. " +
			"테스트 실행 시 에러가 났다가 안 났다가 하는 부분 2.")
	}

	에러내역_슬라이스 := 에러내역_맵.G에러내역_모음(에러난_식별코드)

	if 에러내역_슬라이스 == nil {
		테스트.Error("tools.TestF종목별_일일가격정보_체크_한국() : '에러내역_슬라이스'가 nil입니다. " +
			"테스트 실행 시 에러가 났다가 안 났다가 하는 부분 3.")
	}

	if len(에러내역_슬라이스) != 4 {
		테스트.Errorf("tools.TestF종목별_일일가격정보_체크_한국() : len(에러내역_슬라이스) 값 불일치. 예상값 4, 실제값 %v. "+
			"테스트 실행 시 에러가 났다가 안 났다가 하는 부분 4.",
			len(에러내역_슬라이스))
	}
}
