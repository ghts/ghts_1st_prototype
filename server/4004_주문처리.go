package server

import (
	"runtime"
	"time"
	공통 "pts/common"
)

type S주문처리 struct {
	증권사모음 []I증권사	

	주문접수채널 chan *C주문
	공통이벤트채널 chan int8
	
	주문전송_처리권한 chan int8
}

func (s *S주문처리) G공통이벤트채널() chan int8 { return s.공통이벤트채널 }

func (s *S주문처리) M실행(설정 *C서버설정) {
	설정.G종료대기열().Add(1); defer 설정.G종료대기열().Done()
	
	s.초기화(설정)

	for {
		select {
		case 주문 := <-s.주문접수채널:
			s.주문전송(주문)
		case 이벤트 := <-s.공통이벤트채널:
			switch 이벤트 {
			case 공통.비상탈출이벤트:
				s.비상탈출()
			case 공통.종료이벤트:
				s.종료()
			default:
				panic("S주문처리.M실행() : 예상치 못한 공통 이벤트.")
			}
		default: 
			// 주문은 빠른 시간 내에 처리되어야 하니 대기시간을 짧게 잡자.
			time.Sleep(30 * time.Millisecond)			
		}
	}
}

func (s *S주문처리) 초기화(설정 *C서버설정) {
	s.증권사모음 = 설정.G증권사모음()
	s.주문접수채널 = 설정.G주문접수채널()
	s.공통이벤트채널 = make(chan int8, 10)
	
	// 채널을 세마포어처럼 이용해서 최대 동시처리 숫자를 조절하는 패턴 (Effective Go 참조)
	주문전송_최대동시처리숫자 := 설정.G주문처리모듈설정().G주문처리_최대동시처리숫자()
	s.주문전송_처리권한 = make(chan int8, 주문전송_최대동시처리숫자)	
}

func (s *S주문처리) 주문전송(주문 *C주문) {
	if len(s.증권사모음) == 0 { panic("S주문처리.주문전송() : 증권사 모듈이 존재하지 않음.")
	
	if len(s.증권사모음) == 1 {
		주문전송_도우미(주문, s.증권사모음[0])
		return
	}
	
	// 지정 증권사가 있으면 해당 증권사로 전송.
	var 증권사 I증권사
	for _, 증권사 = range s.증권사모음 {	
		if 증권사.G증권사().G식별코드().G값() == 주문.G증권사().G식별코드().G값() {
			주문전송_도우미(주문, 증권사)
			return			
		}
	}
	
	// 지정 증권사가 없으면 기본 증권사로 전송
	증권사 = s.G증권사_기본값()
	주문전송_도우미(주문, 증권사)		
}

func 주문전송_도우미(주문 *C주문, 증권사 I증권사) {
	<-s.주문전송_처리권한	// 처리권한 획득
		
	go func() {
		증권사.G주문접수채널() <- 주문
		s.주문전송_처리권한 <- 1	// 처리권한 반환.
	}()
}

func (s *S주문처리) 비상탈출() { }	//TODO
func (s *S주문처리) 종료() { runtime.Goexit() }