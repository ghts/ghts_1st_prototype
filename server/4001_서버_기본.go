package server

import (
	공통 "pts/common"
	"runtime"
	"time"
)

// 전략그룹관리모듈, 가격정보제공모듈, 주문처리모듈, 증권사모듈등을 하위모듈로 가진다.
// 주요기능
//	1. 하위모듈 구동.
//	2. 전략그룹과 각 하위모듈 간의 정보교환을 위한 채널정보 제공.
//	3. 비상탈출, 종료등 공통 이벤트 전송.
type S서버 struct {
	전략그룹관리  I전략그룹관리
	가격정보제공  I가격정보제공
	주문처리    I주문처리
	증권사모음   []I증권사
	증권사_기본값 I증권사

	전략그룹등록채널     chan 공통.I전략그룹
	전략그룹정보구독신청채널 chan (chan []공통.I전략그룹)
	가격정보채널       chan *공통.C가격정보
	주문접수채널       chan *공통.C주문
	공통이벤트채널      chan int8
}

// 각 전략그룹이 서버에 등록하는 채널
func (s *S서버) G전략그룹등록채널() chan 공통.I전략그룹 {
	return s.전략그룹등록채널
}

// 각 전략이 주문을 전송하는 목적지.
// 여기를 거친 주문정보는 적절한 증권사 모듈로 전송된다.
func (s *S서버) G주문접수채널() chan *공통.C주문 { return s.주문접수채널 }

// 비상탈출 및 종료신호가 취합되는 곳.
// 여기를 거친 공통 이벤트는 이후 모든 전략그룹과 서버의 모든 하위모듈에 배포된다.
func (s *S서버) G공통이벤트채널() chan int8 { return s.공통이벤트채널() }

// 서버구동
func (s *S서버) M실행(설정 *S서버설정) {
	설정.G종료대기열().Add(1)
	defer 설정.G종료대기열().Done()

	s.초기화(설정)

	for {
		select {
		case 이벤트 := <-s.공통이벤트채널:
			switch 이벤트 {
			case 공통.비상탈출이벤트:
				s.비상탈출()
			case 공통.종료이벤트:
				s.종료()
			default:
				panic("S서버.M실행() : 예상치 못한 공통 이벤트.")
			}
		default:
			// 자주 실행되는 게 아니니 대기시간을 조금 길게 잡자.
			time.Sleep(500 * time.Millisecond)
		}
	}
}

func (s *S서버) 초기화(설정 *C서버설정) {
	s.전략그룹관리 = 설정.G전략그룹관리()
	s.가격정보제공 = 설정.G가격정보제공()
	s.주문처리 = 설정.G주문처리()
	s.증권사모음 = 설정.G증권사모음()
	s.증권사_기본값 = 설정.G증권사_기본값()

	s.전략그룹등록채널 = 설정.G전략그룹등록채널()
	s.주문접수채널 = 설정.G주문접수채널()
	s.공통이벤트채널 = 설정.G공통이벤트채널()

	// 내부모듈 실행.
	go s.전략그룹관리.M실행(설정)
	go s.가격정보제공.M실행(설정)
	go s.주문처리.M실행(설정)

	var 증권사 I증권사
	for _, 증권사 = range s.증권사모음 {
		go 증권사.M실행(설정)
	}
}

func (s *S서버) 비상탈출() { s.공통이벤트전송(공통.비상탈출이벤트) }
func (s *S서버) 종료() {
	s.공통이벤트전송(공통.종료이벤트)
	runtime.Goexit() // 서버 종료
}

func (s *S서버) 공통이벤트전송(이벤트 int8) {
	이벤트전송 := 공통.F이벤트전송

	이벤트전송(s.전략그룹관리.G공통이벤트채널(), 이벤트)
	이벤트전송(s.가격정보제공.G공통이벤트채널(), 이벤트)
	이벤트전송(s.주문처리.G공통이벤트채널(), 이벤트)

	var 증권사 I증권사
	for _, 증권사 = range s.증권사모음 {
		이벤트전송(증권사.G공통이벤트채널(), 이벤트)
	}
}
